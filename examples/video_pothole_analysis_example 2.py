#!/usr/bin/env python3

import cv2
import numpy as np
import yaml
import time
import json
from pathlib import Path
import logging
from datetime import datetime

from vision.detection.pothole_detector import PotholeDetector

def load_config(config_path: str = "config/specialized_detectors.yaml") -> dict:
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        return config
    except FileNotFoundError:
        print(f"Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
        return {}

def create_sample_video(output_path: str = "sample_road_video.mp4", duration: int = 10):
    """Cria um v√≠deo de exemplo para demonstra√ß√£o"""
    
    print(f"üé¨ Criando v√≠deo de exemplo: {output_path}")
    
    # Configura√ß√µes do v√≠deo
    fps = 30
    width, height = 1280, 720
    total_frames = fps * duration
    
    # Codec e writer
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
    
    try:
        for frame_num in range(total_frames):
            # Criar frame base
            frame = np.ones((height, width, 3), dtype=np.uint8) * 255
            
            # Simular estrada
            cv2.rectangle(frame, (0, height//2), (width, height), (128, 128, 128), -1)
            
            # Simular movimento da c√¢mera (efeito de estrada)
            offset = int(frame_num * 2) % 100
            
            # Simular placas de sinaliza√ß√£o
            cv2.rectangle(frame, (50 + offset, 50), (150 + offset, 150), (0, 0, 255), -1)
            cv2.putText(frame, "PARE", (60 + offset, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            # Simular buracos que se movem (efeito de c√¢mera em movimento)
            for i in range(5):
                x_pos = (150 + i * 200 + offset * 3) % width
                y_pos = height//2 + 50 + (i * 30)
                
                # Varia√ß√£o no tamanho dos buracos
                size_factor = 1 + 0.5 * np.sin(frame_num * 0.1 + i)
                ellipse_width = int(30 * size_factor)
                ellipse_height = int(20 * size_factor)
                
                cv2.ellipse(frame, (x_pos, y_pos), (ellipse_width, ellipse_height), 
                           0, 0, 360, (0, 0, 0), -1)
            
            # Adicionar informa√ß√µes do frame
            cv2.putText(frame, f"Frame: {frame_num}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
            cv2.putText(frame, f"Tempo: {frame_num/fps:.1f}s", (10, 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
            
            # Escrever frame
            out.write(frame)
            
            # Progresso
            if frame_num % (fps * 2) == 0:
                progress = (frame_num / total_frames) * 100
                print(f"   Progresso: {progress:.1f}%")
    
    finally:
        out.release()
    
    print(f"‚úÖ V√≠deo de exemplo criado: {output_path}")
    print(f"   Dura√ß√£o: {duration}s, FPS: {fps}, Resolu√ß√£o: {width}x{height}")

def analyze_video_with_pothole_detector(video_path: str, config: dict):
    """Analisa v√≠deo usando o PotholeDetector"""
    
    print(f"\nüîç Analisando v√≠deo: {video_path}")
    
    try:
        # Inicializar detector
        pothole_config = config.get('pothole_detector', {})
        detector = PotholeDetector(pothole_config)
        
        print("‚úÖ PotholeDetector inicializado")
        
        # Configurar caminho de sa√≠da
        output_dir = Path("video_analysis_results")
        output_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_video_path = output_dir / f"annotated_video_{timestamp}.mp4"
        report_path = output_dir / f"analysis_report_{timestamp}.json"
        
        # Processar v√≠deo
        print("\nüé¨ Iniciando processamento do v√≠deo...")
        start_time = time.time()
        
        video_report = detector.process_video(
            video_path=video_path,
            output_path=str(output_video_path)
        )
        
        processing_time = time.time() - start_time
        print(f"‚úÖ Processamento conclu√≠do em {processing_time:.2f}s")
        
        # Salvar relat√≥rio
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(video_report, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üíæ Relat√≥rio salvo: {report_path}")
        print(f"üé¨ V√≠deo anotado salvo: {output_video_path}")
        
        # Exibir resultados
        display_video_analysis_results(video_report)
        
        # Estat√≠sticas de tracking
        tracking_stats = detector.get_tracking_statistics()
        display_tracking_statistics(tracking_stats)
        
        return video_report, output_video_path, report_path
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise do v√≠deo: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None
    
    finally:
        if 'detector' in locals():
            detector.cleanup()

def display_video_analysis_results(report: dict):
    """Exibe resultados da an√°lise do v√≠deo"""
    
    print("\nüìä RESULTADOS DA AN√ÅLISE DO V√çDEO:")
    print("=" * 50)
    
    # Informa√ß√µes do v√≠deo
    video_info = report.get('video_info', {})
    print(f"üé¨ V√çDEO:")
    print(f"   FPS: {video_info.get('fps', 'N/A')}")
    print(f"   Total de frames: {video_info.get('total_frames', 'N/A')}")
    print(f"   Dura√ß√£o: {video_info.get('duration', 'N/A'):.2f}s")
    print(f"   Frames processados: {video_info.get('processed_frames', 'N/A')}")
    
    # Resumo de detec√ß√µes
    detection_summary = report.get('detection_summary', {})
    print(f"\nüîç DETEC√á√ïES:")
    print(f"   Total de buracos: {detection_summary.get('total_detections', 0)}")
    print(f"   Frames com detec√ß√µes: {detection_summary.get('frames_with_detections', 0)}")
    print(f"   Taxa de detec√ß√£o: {detection_summary.get('detection_rate', 0):.2%}")
    
    # An√°lise de qualidade
    quality_analysis = report.get('quality_analysis', {})
    print(f"\nüìà QUALIDADE DOS FRAMES:")
    print(f"   Qualidade m√©dia: {quality_analysis.get('average_frame_quality', 0):.3f}")
    
    quality_dist = quality_analysis.get('quality_distribution', {})
    if quality_dist:
        print(f"   Distribui√ß√£o:")
        for quality, count in quality_dist.items():
            print(f"      {quality.capitalize()}: {count}")
    
    # Condi√ß√£o da estrada
    road_condition = report.get('road_condition_analysis', {})
    print(f"\nüõ£Ô∏è CONDI√á√ÉO DA ESTRADA:")
    print(f"   Condi√ß√£o geral: {road_condition.get('overall_condition', 'N/A')}")
    
    condition_dist = road_condition.get('condition_distribution', {})
    if condition_dist:
        print(f"   Distribui√ß√£o:")
        for condition, count in condition_dist.items():
            print(f"      {condition.capitalize()}: {count}")
    
    # Prioridade de manuten√ß√£o
    maintenance = report.get('maintenance_analysis', {})
    print(f"\nüîß MANUTEN√á√ÉO:")
    print(f"   Prioridade geral: {maintenance.get('overall_priority', 'N/A')}")
    
    priority_dist = maintenance.get('priority_distribution', {})
    if priority_dist:
        print(f"   Distribui√ß√£o:")
        for priority, count in priority_dist.items():
            print(f"      {priority.capitalize()}: {count}")
    
    # An√°lise de tracking
    tracking = report.get('tracking_analysis', {})
    print(f"\nüéØ TRACKING:")
    print(f"   Total de tracks: {tracking.get('total_tracks', 0)}")
    print(f"   Tracks est√°veis: {tracking.get('stable_tracks', 0)}")
    
    # Recomenda√ß√µes
    recommendations = report.get('recommendations', [])
    if recommendations:
        print(f"\nüí° RECOMENDA√á√ïES:")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")

def display_tracking_statistics(tracking_stats: dict):
    """Exibe estat√≠sticas de tracking"""
    
    print(f"\nüìä ESTAT√çSTICAS DE TRACKING:")
    print("=" * 40)
    
    print(f"   Total de tracks: {tracking_stats.get('total_tracks', 0)}")
    print(f"   Tracks est√°veis: {tracking_stats.get('stable_tracks', 0)}")
    print(f"   Comprimento m√©dio: {tracking_stats.get('average_track_length', 0):.1f} frames")
    print(f"   Comprimento m√°ximo: {tracking_stats.get('max_track_length', 0)} frames")
    
    track_dist = tracking_stats.get('track_distribution', {})
    if track_dist:
        print(f"   Distribui√ß√£o:")
        print(f"      Curtos (< {tracking_stats.get('min_track_length', 3)}): {track_dist.get('short', 0)}")
        print(f"      Est√°veis: {track_dist.get('stable', 0)}")
        print(f"      Longos: {track_dist.get('long', 0)}")

def main():
    print("üé¨ An√°lise de V√≠deo com PotholeDetector")
    print("=" * 50)
    
    # Configurar logging
    logging.basicConfig(level=logging.INFO)
    
    # Carregar configura√ß√£o
    config = load_config()
    if not config:
        print("‚ùå Falha ao carregar configura√ß√£o")
        return
    
    print("‚úÖ Configura√ß√£o carregada com sucesso")
    
    # Criar v√≠deo de exemplo se n√£o existir
    sample_video_path = "sample_road_video.mp4"
    if not Path(sample_video_path).exists():
        print("\nüé¨ Criando v√≠deo de exemplo...")
        create_sample_video(sample_video_path, duration=10)
    else:
        print(f"‚úÖ V√≠deo de exemplo j√° existe: {sample_video_path}")
    
    # Analisar v√≠deo
    print(f"\nüîç Iniciando an√°lise do v√≠deo...")
    
    try:
        video_report, output_video, report_path = analyze_video_with_pothole_detector(
            sample_video_path, config
        )
        
        if video_report:
            print("\nüéâ An√°lise de v√≠deo conclu√≠da com sucesso!")
            print(f"\nüìÅ Arquivos gerados:")
            print(f"   ‚Ä¢ {output_video}")
            print(f"   ‚Ä¢ {report_path}")
            
            # Sugest√µes de uso
            print(f"\nüí° SUGEST√ïES DE USO:")
            print(f"   1. Visualize o v√≠deo anotado para ver as detec√ß√µes em tempo real")
            print(f"   2. Analise o relat√≥rio JSON para estat√≠sticas detalhadas")
            print(f"   3. Use as configura√ß√µes para ajustar sensibilidade e tracking")
            print(f"   4. Processe v√≠deos reais de estradas para an√°lise em produ√ß√£o")
        
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
