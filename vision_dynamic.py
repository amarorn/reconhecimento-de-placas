#!/usr/bin/env python3
"""
Sistema Din√¢mico de Vis√£o Computacional para Placas de Sinaliza√ß√£o
==================================================================

Este sistema analisa placas dinamicamente sem dicion√°rios fixos:
- Detecta caracter√≠sticas visuais automaticamente
- Classifica baseado em padr√µes aprendidos
- Gera c√≥digos √∫nicos para cada placa
- Sistema de confian√ßa adaptativo
"""

import cv2
import numpy as np
import os
import json
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from pathlib import Path
import hashlib

class DynamicVisionProcessor:
    """Processador din√¢mico de vis√£o computacional para placas de sinaliza√ß√£o"""
    
    def __init__(self):
        print("üöÄ Inicializando Sistema Din√¢mico de Vis√£o Computacional...")
        
        # Configura√ß√µes
        self.config = {
            'min_area': 3000,  # √Årea m√≠nima para detec√ß√£o
            'confidence_threshold': 0.3,
            'image_size': 640,
            'color_threshold': 3.0,  # % m√≠nimo de cor para detec√ß√£o
            'shape_approximation': 0.02
        }
        
        # Sistema de classifica√ß√£o din√¢mico
        self.classification_rules = self._initialize_classification_rules()
        
        # Hist√≥rico de placas processadas
        self.processed_plates = {}
        
        print("‚úÖ Sistema inicializado com sucesso!")
    
    def _initialize_classification_rules(self) -> Dict:
        """Inicializa regras de classifica√ß√£o baseadas em padr√µes visuais"""
        return {
            'obrigatorio': {
                'cores_primarias': ['vermelho'],
                'formas_tipicas': ['octogonal', 'circular'],
                'padrao': 'proibicao_obrigacao'
            },
            'advertencia': {
                'cores_primarias': ['amarelo', 'laranja'],
                'formas_tipicas': ['triangular', 'diamante'],
                'padrao': 'perigo_aviso'
            },
            'regulamentacao': {
                'cores_primarias': ['azul', 'verde'],
                'formas_tipicas': ['circular', 'retangular'],
                'padrao': 'orientacao_regra'
            },
            'informacao': {
                'cores_primarias': ['azul', 'verde', 'branco'],
                'formas_tipicas': ['retangular', 'quadrado'],
                'padrao': 'dados_orientacao'
            }
        }
    
    def preprocess_image(self, image: np.ndarray) -> np.ndarray:
        """Pr√©-processa imagem para melhor an√°lise"""
        try:
            # Redimensionar para tamanho padr√£o
            image = cv2.resize(image, (self.config['image_size'], self.config['image_size']))
            
            # Converter para RGB
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # Aplicar filtros para redu√ß√£o de ru√≠do
            image = cv2.GaussianBlur(image, (3, 3), 0)
            
            # Aumentar contraste usando CLAHE
            lab = cv2.cvtColor(image, cv2.COLOR_RGB2LAB)
            l, a, b = cv2.split(lab)
            
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            l = clahe.apply(l)
            
            # Reconstruir LAB
            lab = cv2.merge([l, a, b])
            image = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)
            
            return image
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no pr√©-processamento: {e}")
            return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    def detect_plates(self, image: np.ndarray) -> List[Dict]:
        """Detecta placas na imagem usando an√°lise de contornos"""
        try:
            # Converter para escala de cinza
            gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            
            # Aplicar threshold adaptativo
            thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                         cv2.THRESH_BINARY, 11, 2)
            
            # Detectar contornos
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            plates = []
            for contour in contours:
                area = cv2.contourArea(contour)
                if area > self.config['min_area']:
                    # Aproximar contorno
                    epsilon = self.config['shape_approximation'] * cv2.arcLength(contour, True)
                    approx = cv2.approxPolyDP(contour, epsilon, True)
                    
                    # Verificar se √© uma forma v√°lida
                    if len(approx) >= 3:
                        x, y, w, h = cv2.boundingRect(contour)
                        
                        # Extrair ROI da placa
                        roi = image[y:y+h, x:x+w]
                        
                        # Calcular caracter√≠sticas da forma
                        shape_features = self._analyze_shape_features(contour, approx)
                        
                        plates.append({
                            'bbox': [x, y, x+w, y+h],
                            'confidence': 0.7,
                            'contour': contour,
                            'approx': approx,
                            'roi': roi,
                            'area': area,
                            'shape_features': shape_features
                        })
            
            return plates
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na detec√ß√£o: {e}")
            return []
    
    def _analyze_shape_features(self, contour: np.ndarray, approx: np.ndarray) -> Dict:
        """Analisa caracter√≠sticas detalhadas da forma"""
        try:
            vertices = len(approx)
            area = cv2.contourArea(contour)
            perimeter = cv2.arcLength(contour, True)
            
            # Caracter√≠sticas b√°sicas
            features = {
                'vertices': vertices,
                'area': area,
                'perimeter': perimeter,
                'compactness': (perimeter * perimeter) / (4 * np.pi * area) if area > 0 else 0
            }
            
            # Classifica√ß√£o de forma
            if vertices == 3:
                features['shape_type'] = 'triangular'
                features['regularity'] = self._calculate_triangle_regularity(approx)
            elif vertices == 4:
                x, y, w, h = cv2.boundingRect(contour)
                aspect_ratio = w / h
                if 0.8 <= aspect_ratio <= 1.2:
                    features['shape_type'] = 'quadrado'
                    features['regularity'] = self._calculate_rectangle_regularity(approx)
                else:
                    features['shape_type'] = 'retangular'
                    features['regularity'] = self._calculate_rectangle_regularity(approx)
            elif vertices == 8:
                features['shape_type'] = 'octogonal'
                features['regularity'] = self._calculate_octagon_regularity(approx)
            elif vertices > 8:
                # Verificar circularidade
                circularity = 4 * np.pi * area / (perimeter * perimeter) if perimeter > 0 else 0
                if circularity > 0.8:
                    features['shape_type'] = 'circular'
                    features['regularity'] = circularity
                else:
                    features['shape_type'] = 'irregular'
                    features['regularity'] = 0.3
            else:
                features['shape_type'] = 'irregular'
                features['regularity'] = 0.2
            
            return features
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de forma: {e}")
            return {'shape_type': 'desconhecido', 'regularity': 0.0}
    
    def _calculate_triangle_regularity(self, approx: np.ndarray) -> float:
        """Calcula regularidade de um tri√¢ngulo"""
        try:
            if len(approx) == 3:
                # Calcular √¢ngulos
                angles = []
                for i in range(3):
                    p1 = approx[i][0]
                    p2 = approx[(i+1)%3][0]
                    p3 = approx[(i+2)%3][0]
                    
                    v1 = p1 - p2
                    v2 = p3 - p2
                    
                    cos_angle = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
                    cos_angle = np.clip(cos_angle, -1, 1)
                    angle = np.arccos(cos_angle)
                    angles.append(angle)
                
                # Tri√¢ngulo equil√°tero tem √¢ngulos de 60¬∞
                ideal_angle = np.pi / 3
                angle_diff = sum(abs(angle - ideal_angle) for angle in angles)
                regularity = max(0, 1 - angle_diff / (np.pi / 2))
                
                return regularity
        except:
            pass
        return 0.5
    
    def _calculate_rectangle_regularity(self, approx: np.ndarray) -> float:
        """Calcula regularidade de um ret√¢ngulo"""
        try:
            if len(approx) == 4:
                # Calcular √¢ngulos
                angles = []
                for i in range(4):
                    p1 = approx[i][0]
                    p2 = approx[(i+1)%4][0]
                    p3 = approx[(i+2)%4][0]
                    
                    v1 = p1 - p2
                    v2 = p3 - p2
                    
                    cos_angle = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
                    cos_angle = np.clip(cos_angle, -1, 1)
                    angle = np.arccos(cos_angle)
                    angles.append(angle)
                
                # Ret√¢ngulo tem √¢ngulos de 90¬∞
                ideal_angle = np.pi / 2
                angle_diff = sum(abs(angle - ideal_angle) for angle in angles)
                regularity = max(0, 1 - angle_diff / (np.pi / 2))
                
                return regularity
        except:
            pass
        return 0.5
    
    def _calculate_octagon_regularity(self, approx: np.ndarray) -> float:
        """Calcula regularidade de um oct√≥gono"""
        try:
            if len(approx) == 8:
                # Calcular √¢ngulos
                angles = []
                for i in range(8):
                    p1 = approx[i][0]
                    p2 = approx[(i+1)%8][0]
                    p3 = approx[(i+2)%8][0]
                    
                    v1 = p1 - p2
                    v2 = p3 - p2
                    
                    cos_angle = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))
                    cos_angle = np.clip(cos_angle, -1, 1)
                    angle = np.arccos(cos_angle)
                    angles.append(angle)
                
                # Oct√≥gono regular tem √¢ngulos de 135¬∞
                ideal_angle = 3 * np.pi / 4
                angle_diff = sum(abs(angle - ideal_angle) for angle in angles)
                regularity = max(0, 1 - angle_diff / (np.pi / 2))
                
                return regularity
        except:
            pass
        return 0.5
    
    def analyze_colors(self, roi: np.ndarray) -> Dict:
        """Analisa cores dominantes na placa"""
        try:
            # Converter para HSV
            hsv = cv2.cvtColor(roi, cv2.COLOR_RGB2HSV)
            
            # Definir ranges de cores mais precisos
            color_ranges = {
                'vermelho': [
                    ([0, 100, 100], [10, 255, 255]),      # Vermelho baixo
                    ([160, 100, 100], [180, 255, 255])    # Vermelho alto
                ],
                'azul': [([100, 100, 100], [130, 255, 255])],
                'amarelo': [([20, 100, 100], [30, 255, 255])],
                'laranja': [([10, 100, 100], [20, 255, 255])],
                'verde': [([40, 100, 100], [80, 255, 255])],
                'branco': [([0, 0, 200], [180, 30, 255])],
                'preto': [([0, 0, 0], [180, 255, 30])],
                'cinza': [([0, 0, 50], [180, 30, 200])]
            }
            
            color_analysis = {}
            total_pixels = roi.shape[0] * roi.shape[1]
            
            for color_name, ranges in color_ranges.items():
                color_pixels = 0
                
                for lower, upper in ranges:
                    mask = cv2.inRange(hsv, np.array(lower), np.array(upper))
                    color_pixels += cv2.countNonZero(mask)
                
                percentage = (color_pixels / total_pixels) * 100
                if percentage > self.config['color_threshold']:
                    color_analysis[color_name] = {
                        'percentage': percentage,
                        'pixel_count': color_pixels,
                        'dominance': 'primary' if percentage > 15 else 'secondary'
                    }
            
            return color_analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de cores: {e}")
            return {}
    
    def classify_plate_dynamically(self, colors: Dict, shape_features: Dict) -> Dict:
        """Classifica a placa dinamicamente baseado em caracter√≠sticas visuais"""
        try:
            # Sistema de pontua√ß√£o din√¢mico
            scores = {
                'obrigatorio': 0,
                'advertencia': 0,
                'regulamentacao': 0,
                'informacao': 0
            }
            
            # An√°lise baseada em cores
            primary_colors = [color for color, info in colors.items() 
                            if info.get('dominance') == 'primary']
            
            for color in primary_colors:
                if color in ['vermelho']:
                    scores['obrigatorio'] += 40
                elif color in ['amarelo', 'laranja']:
                    scores['advertencia'] += 35
                elif color in ['azul', 'verde']:
                    scores['regulamentacao'] += 30
                    scores['informacao'] += 25
                elif color in ['branco', 'cinza']:
                    scores['informacao'] += 20
            
            # An√°lise baseada em formas
            shape_type = shape_features.get('shape_type', 'desconhecido')
            regularity = shape_features.get('regularity', 0)
            
            if shape_type == 'octogonal':
                scores['obrigatorio'] += 30
            elif shape_type == 'triangular':
                scores['advertencia'] += 30
            elif shape_type == 'circular':
                scores['obrigatorio'] += 20
                scores['regulamentacao'] += 20
            elif shape_type == 'retangular':
                scores['informacao'] += 25
                scores['regulamentacao'] += 20
            
            # B√¥nus por regularidade
            regularity_bonus = regularity * 20
            for category in scores:
                scores[category] += regularity_bonus
            
            # Determinar categoria vencedora
            best_category = max(scores, key=scores.get)
            best_score = scores[best_category]
            
            # Normalizar score para 0-1
            confidence = min(best_score / 100, 1.0)
            
            # Gerar c√≥digo √∫nico baseado em caracter√≠sticas
            unique_code = self._generate_unique_code(colors, shape_features)
            
            # Classifica√ß√£o din√¢mica
            classification = {
                'tipo': best_category,
                'codigo': unique_code,
                'nome': self._generate_dynamic_name(best_category, colors, shape_features),
                'significado': self._generate_dynamic_meaning(best_category, colors, shape_features),
                'acao': self._generate_dynamic_action(best_category, colors, shape_features),
                'penalidade': self._generate_dynamic_penalty(best_category, colors, shape_features),
                'confidence': confidence,
                'caracteristicas': {
                    'cores': list(colors.keys()),
                    'formas': [shape_type],
                    'regularidade': regularity,
                    'vertices': shape_features.get('vertices', 0)
                },
                'scores_detalhados': scores
            }
            
            return classification
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na classifica√ß√£o din√¢mica: {e}")
            return self._get_fallback_classification()
    
    def _generate_unique_code(self, colors: Dict, shape_features: Dict) -> str:
        """Gera c√≥digo √∫nico baseado nas caracter√≠sticas da placa"""
        try:
            # Criar string de caracter√≠sticas
            color_str = '_'.join(sorted(colors.keys()))
            shape_str = shape_features.get('shape_type', 'desconhecido')
            vertices_str = str(shape_features.get('vertices', 0))
            
            # Combinar caracter√≠sticas
            features_str = f"{color_str}_{shape_str}_{vertices_str}"
            
            # Gerar hash √∫nico
            hash_object = hashlib.md5(features_str.encode())
            short_hash = hash_object.hexdigest()[:8].upper()
            
            # Determinar prefixo baseado no tipo
            if 'vermelho' in colors and 'octogonal' in shape_features.get('shape_type', ''):
                prefix = 'R-1'
            elif 'vermelho' in colors and 'circular' in shape_features.get('shape_type', ''):
                prefix = 'R-6'
            elif 'azul' in colors and 'circular' in shape_features.get('shape_type', ''):
                prefix = 'R-19'
            elif 'amarelo' in colors and 'triangular' in shape_features.get('shape_type', ''):
                prefix = 'A-1'
            else:
                prefix = 'DYN'
            
            return f"{prefix}-{short_hash}"
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar c√≥digo √∫nico: {e}")
            return "DYN-UNKNOWN"
    
    def _generate_dynamic_name(self, category: str, colors: Dict, shape_features: Dict) -> str:
        """Gera nome din√¢mico baseado nas caracter√≠sticas"""
        try:
            color_names = list(colors.keys())
            shape_type = shape_features.get('shape_type', 'desconhecido')
            
            if category == 'obrigatorio':
                if 'vermelho' in color_names and 'octogonal' in shape_type:
                    return 'PARE'
                elif 'vermelho' in color_names and 'circular' in shape_type:
                    return 'PROIBI√á√ÉO'
                else:
                    return 'OBRIGA√á√ÉO'
            
            elif category == 'advertencia':
                if 'amarelo' in color_names and 'triangular' in shape_type:
                    return 'ADVERT√äNCIA'
                else:
                    return 'PERIGO'
            
            elif category == 'regulamentacao':
                if 'azul' in color_names:
                    return 'REGULAMENTA√á√ÉO'
                else:
                    return 'ORIENTA√á√ÉO'
            
            elif category == 'informacao':
                return 'INFORMA√á√ÉO'
            
            else:
                return 'SINALIZA√á√ÉO'
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar nome din√¢mico: {e}")
            return 'PLACA N√ÉO IDENTIFICADA'
    
    def _generate_dynamic_meaning(self, category: str, colors: Dict, shape_features: Dict) -> str:
        """Gera significado din√¢mico baseado nas caracter√≠sticas"""
        try:
            color_names = list(colors.keys())
            shape_type = shape_features.get('shape_type', 'desconhecido')
            
            if category == 'obrigatorio':
                if 'vermelho' in color_names:
                    return 'Proibi√ß√£o ou obriga√ß√£o espec√≠fica. Aten√ß√£o especial necess√°ria.'
                else:
                    return 'Regra obrigat√≥ria a ser seguida.'
            
            elif category == 'advertencia':
                if 'amarelo' in color_names:
                    return 'Advert√™ncia de perigo ou situa√ß√£o especial √† frente.'
                else:
                    return 'Aviso importante para motoristas.'
            
            elif category == 'regulamentacao':
                return 'Regulamenta√ß√£o espec√≠fica de tr√¢nsito a ser seguida.'
            
            elif category == 'informacao':
                return 'Informa√ß√£o √∫til para orienta√ß√£o e dire√ß√£o.'
            
            else:
                return 'Sinaliza√ß√£o de tr√¢nsito com orienta√ß√µes espec√≠ficas.'
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar significado din√¢mico: {e}")
            return 'Significado n√£o determinado'
    
    def _generate_dynamic_action(self, category: str, colors: Dict, shape_features: Dict) -> str:
        """Gera a√ß√£o din√¢mica baseado nas caracter√≠sticas"""
        try:
            if category == 'obrigatorio':
                return 'Seguir obrigatoriamente as instru√ß√µes indicadas'
            elif category == 'advertencia':
                return 'Reduzir velocidade e ter aten√ß√£o especial'
            elif category == 'regulamentacao':
                return 'Respeitar as regras de tr√¢nsito indicadas'
            elif category == 'informacao':
                return 'Observar e seguir as orienta√ß√µes fornecidas'
            else:
                return 'Observar e seguir orienta√ß√µes'
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar a√ß√£o din√¢mica: {e}")
            return 'A√ß√£o n√£o determinada'
    
    def _generate_dynamic_penalty(self, category: str, colors: Dict, shape_features: Dict) -> str:
        """Gera penalidade din√¢mica baseado nas caracter√≠sticas"""
        try:
            if category == 'obrigatorio':
                return 'Multa e pontos na carteira'
            elif category == 'advertencia':
                return 'N√£o aplic√°vel (advert√™ncia)'
            elif category == 'regulamentacao':
                return 'Multa e pontos na carteira'
            elif category == 'informacao':
                return 'N√£o aplic√°vel (informa√ß√£o)'
            else:
                return 'Verificar tipo espec√≠fico'
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao gerar penalidade din√¢mica: {e}")
            return 'Penalidade n√£o determinada'
    
    def _get_fallback_classification(self) -> Dict:
        """Classifica√ß√£o de fallback em caso de erro"""
        return {
            'tipo': 'desconhecido',
            'codigo': 'DYN-ERROR',
            'nome': 'PLACA N√ÉO IDENTIFICADA',
            'significado': 'N√£o foi poss√≠vel identificar esta placa',
            'acao': 'Observar e seguir orienta√ß√µes',
            'penalidade': 'Verificar tipo espec√≠fico',
            'confidence': 0.0,
            'caracteristicas': {
                'cores': [],
                'formas': ['desconhecido'],
                'regularidade': 0.0,
                'vertices': 0
            },
            'scores_detalhados': {}
        }
    
    def process_image(self, image_path: str) -> Dict:
        """Processa uma imagem completa usando vis√£o computacional din√¢mica"""
        print(f"üîç Processando: {image_path}")
        
        try:
            # Carregar imagem
            image = cv2.imread(image_path)
            if image is None:
                return {'error': 'Imagem n√£o carregada', 'image_path': image_path}
            
            # Pr√©-processar
            processed_image = self.preprocess_image(image)
            
            # Detectar placas
            plates = self.detect_plates(processed_image)
            
            if not plates:
                return {
                    'image_path': image_path,
                    'plates_detected': 0,
                    'message': 'Nenhuma placa detectada'
                }
            
            # Processar cada placa detectada
            results = []
            for i, plate in enumerate(plates):
                print(f"   üìã Analisando placa {i+1}/{len(plates)}")
                
                # Analisar cores
                colors = self.analyze_colors(plate['roi'])
                
                # Classificar dinamicamente
                classification = self.classify_plate_dynamically(colors, plate['shape_features'])
                
                # Combinar resultados
                plate_result = {
                    'plate_id': i + 1,
                    'bbox': plate['bbox'],
                    'detection_confidence': plate['confidence'],
                    'classification': classification,
                    'roi_size': plate['roi'].shape[:2],
                    'area': plate['area'],
                    'shape_features': plate['shape_features'],
                    'color_analysis': colors
                }
                
                results.append(plate_result)
                
                # Armazenar na base de dados din√¢mica
                self._store_plate_data(plate_result)
            
            return {
                'image_path': image_path,
                'timestamp': datetime.now().isoformat(),
                'plates_detected': len(plates),
                'results': results,
                'image_info': {
                    'width': image.shape[1],
                    'height': image.shape[0],
                    'channels': image.shape[2]
                }
            }
            
        except Exception as e:
            return {
                'error': f'Erro ao processar {image_path}: {str(e)}',
                'image_path': image_path
            }
    
    def _store_plate_data(self, plate_result: Dict):
        """Armazena dados da placa para aprendizado futuro"""
        try:
            plate_id = f"{plate_result['classification']['codigo']}_{plate_result['plate_id']}"
            
            self.processed_plates[plate_id] = {
                'timestamp': datetime.now().isoformat(),
                'classification': plate_result['classification'],
                'characteristics': {
                    'colors': plate_result['color_analysis'],
                    'shapes': plate_result['shape_features'],
                    'area': plate_result['area']
                },
                'confidence': plate_result['classification']['confidence']
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao armazenar dados da placa: {e}")
    
    def process_folder(self, folder_path: str) -> List[Dict]:
        """Processa todas as imagens em uma pasta"""
        folder = Path(folder_path)
        if not folder.exists():
            return [{'error': f'Pasta n√£o encontrada: {folder_path}'}]
        
        # Encontrar imagens
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
        image_files = []
        for ext in image_extensions:
            image_files.extend(folder.glob(f'*{ext}'))
            image_files.extend(folder.glob(f'*{ext.upper()}'))
        
        if not image_files:
            return [{'error': f'Nenhuma imagem encontrada em: {folder_path}'}]
        
        print(f"üìÅ Processando {len(image_files)} imagens em: {folder_path}")
        
        results = []
        for image_file in image_files:
            result = self.process_image(str(image_file))
            results.append(result)
        
        return results
    
    def generate_report(self, results: List[Dict], output_file: str = None) -> str:
        """Gera relat√≥rio detalhado dos resultados"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Estat√≠sticas
        total_images = len(results)
        successful_images = len([r for r in results if 'error' not in r])
        total_plates = sum([r.get('plates_detected', 0) for r in results if 'error' not in r])
        
        # An√°lise de confian√ßa
        confidences = []
        for result in results:
            if 'error' not in result and 'results' in result:
                for plate in result['results']:
                    conf = plate['classification']['confidence']
                    confidences.append(conf)
        
        avg_confidence = np.mean(confidences) if confidences else 0
        
        # Relat√≥rio
        report = f"""# üö¶ RELAT√ìRIO DE VIS√ÉO COMPUTACIONAL DIN√ÇMICA - PLACAS DE SINALIZA√á√ÉO

## üìÖ Data de Gera√ß√£o: {timestamp}
## üìä Estat√≠sticas Gerais
- **Total de imagens**: {total_images}
- **Imagens processadas com sucesso**: {successful_images}
- **Total de placas detectadas**: {total_plates}
- **Confian√ßa m√©dia**: {avg_confidence:.2f}
- **Placas √∫nicas processadas**: {len(self.processed_plates)}

## üîç DETALHES POR IMAGEM

"""
        
        for result in results:
            if 'error' in result:
                report += f"""
### ‚ùå {result.get('image_path', 'Imagem desconhecida')}
**Erro**: {result['error']}

"""
            else:
                report += f"""
### ‚úÖ {result.get('image_path', 'Imagem desconhecida')}
**Placas detectadas**: {result.get('plates_detected', 0)}

"""
                
                for plate in result.get('results', []):
                    classification = plate['classification']
                    report += f"""
#### üìã Placa {plate['plate_id']}
- **Nome**: {classification['nome']}
- **C√≥digo √önico**: {classification['codigo']}
- **Tipo**: {classification['tipo']}
- **Significado**: {classification['significado']}
- **A√ß√£o**: {classification['acao']}
- **Penalidade**: {classification['penalidade']}
- **Confian√ßa**: {classification['confidence']:.2f}
- **Caracter√≠sticas**:
  - Cores: {', '.join(classification['caracteristicas']['cores'])}
  - Forma: {classification['caracteristicas']['formas'][0]}
  - Regularidade: {classification['caracteristicas']['regularidade']:.2f}
  - V√©rtices: {classification['caracteristicas']['vertices']}
- **√Årea**: {plate.get('area', 0):.0f} pixels
- **Scores Detalhados**:
  - Obrigat√≥rio: {classification.get('scores_detalhados', {}).get('obrigatorio', 0):.1f}
  - Advert√™ncia: {classification.get('scores_detalhados', {}).get('advertencia', 0):.1f}
  - Regulamenta√ß√£o: {classification.get('scores_detalhados', {}).get('regulamentacao', 0):.1f}
  - Informa√ß√£o: {classification.get('scores_detalhados', {}).get('informacao', 0):.1f}

"""
        
        # Base de dados din√¢mica
        report += f"""
## üß† BASE DE DADOS DIN√ÇMICA

### Placas Processadas: {len(self.processed_plates)}
"""
        
        for plate_id, plate_data in self.processed_plates.items():
            report += f"""
#### {plate_id}
- **Timestamp**: {plate_data['timestamp']}
- **Confian√ßa**: {plate_data['confidence']:.2f}
- **Caracter√≠sticas**: {', '.join(plate_data['characteristics']['colors'].keys())} + {plate_data['characteristics']['shapes']['shape_type']}

"""
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(report)
                print(f"‚úÖ Relat√≥rio salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio: {e}")
        
        return report

def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    print("üöÄ SISTEMA DIN√ÇMICO DE VIS√ÉO COMPUTACIONAL PARA PLACAS DE SINALIZA√á√ÉO")
    print("=" * 70)
    
    # Inicializar processador
    processor = DynamicVisionProcessor()
    
    # Processar pasta de sinaliza√ß√£o
    sinalizacao_folder = "sinalizacao"
    
    if os.path.exists(sinalizacao_folder):
        print(f"\nüìÅ Processando pasta: {sinalizacao_folder}")
        results = processor.process_folder(sinalizacao_folder)
        
        # Gerar relat√≥rio
        report_file = "relatorio_visao_dinamica.md"
        report = processor.generate_report(results, report_file)
        
        print(f"\nüìä RELAT√ìRIO GERADO:")
        print(f"   ‚Ä¢ Total de imagens: {len(results)}")
        print(f"   ‚Ä¢ Placas detectadas: {sum([r.get('plates_detected', 0) for r in results if 'error' not in r])}")
        print(f"   ‚Ä¢ Placas √∫nicas: {len(processor.processed_plates)}")
        print(f"   ‚Ä¢ Relat√≥rio salvo em: {report_file}")
        
    else:
        print(f"\n‚ùå Pasta n√£o encontrada: {sinalizacao_folder}")
        print("üí° Certifique-se de que a pasta existe e cont√©m imagens")

if __name__ == "__main__":
    main()
