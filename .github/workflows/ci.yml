name: CI/CD Pipeline - Vis√£o Computacional

on:
  push:
    branches: [ main, refactor-vision-architecture, develop ]
  pull_request:
    branches: [ main, refactor-vision-architecture ]

env:
  PYTHON_VERSION: '3.9'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  test:
    name: Testes e Qualidade de C√≥digo
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Instalar depend√™ncias do sistema
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev
        sudo apt-get install -y tesseract-ocr tesseract-ocr-por
        
    - name: Instalar depend√™ncias Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_refatorado.txt
        pip install pytest pytest-cov pytest-asyncio
        pip install black flake8 mypy
        
    - name: Verificar formata√ß√£o com Black
      run: |
        black --check --diff vision/ config/ tests/ examples/
        
    - name: Verificar estilo com Flake8
      run: |
        flake8 vision/ config/ tests/ examples/ --max-line-length=100 --ignore=E203,W503
        
    - name: Verificar tipos com MyPy
      run: |
        mypy vision/ config/ --ignore-missing-imports --no-strict-optional
        
    - name: Executar testes unit√°rios
      run: |
        pytest tests/test_preprocessing.py tests/test_detection.py tests/test_ocr.py -v --cov=vision --cov-report=term-missing
        
    - name: Executar testes de integra√ß√£o
      run: |
        pytest tests/test_pipeline.py tests/test_integration.py -v --cov=vision --cov-report=term-missing
        
    - name: Gerar relat√≥rio de cobertura
      run: |
        pytest --cov=vision --cov=config --cov-report=html:htmlcov --cov-report=xml
        
    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  build:
    name: Build e Teste de Imagem
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build imagem Docker
      run: |
        docker build -t vision-pipeline:test .
        
    - name: Testar imagem Docker
      run: |
        docker run --rm vision-pipeline:test python -c "import vision; print('‚úÖ Build bem-sucedido')"
        
  security:
    name: An√°lise de Seguran√ßa
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Instalar depend√™ncias
      run: |
        pip install bandit safety
        
    - name: An√°lise de seguran√ßa com Bandit
      run: |
        bandit -r vision/ config/ -f json -o bandit-report.json || true
        
    - name: Verificar vulnerabilidades de depend√™ncias
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload relat√≥rios de seguran√ßa
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  performance:
    name: Testes de Performance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Instalar depend√™ncias
      run: |
        pip install -r requirements_refatorado.txt
        pip install pytest-benchmark
        
    - name: Executar benchmarks
      run: |
        pytest tests/ --benchmark-only --benchmark-skip --benchmark-min-rounds=5
        
  deploy-staging:
    name: Deploy para Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Deploy para ambiente de staging
      run: |
        echo "üöÄ Deployando para staging..."
        # Aqui voc√™ pode adicionar comandos para deploy real
        # Por exemplo: kubectl apply, docker push, etc.
        
  deploy-production:
    name: Deploy para Produ√ß√£o
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Deploy para produ√ß√£o
      run: |
        echo "üöÄ Deployando para produ√ß√£o..."
        # Aqui voc√™ pode adicionar comandos para deploy real
        # Por exemplo: kubectl apply, docker push, etc.

  notify:
    name: Notifica√ß√µes
    runs-on: ubuntu-latest
    needs: [test, build, security, performance]
    if: always()
    
    steps:
    - name: Notificar resultado
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Pipeline executado com sucesso!"
        else
          echo "‚ùå Pipeline falhou!"
          exit 1
        fi