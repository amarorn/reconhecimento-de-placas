name: 🚀 Deploy e Infraestrutura - Fase 4

on:
  push:
    branches: [ main, refactor-vision-architecture ]
  pull_request:
    branches: [ main, refactor-vision-architecture ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Testes e Qualidade
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: 🧪 Run tests
        run: |
          python -m pytest tests/ -v --cov=vision --cov-report=xml
          
      - name: 🔍 Code quality
        run: |
          black --check vision/
          flake8 vision/
          mypy vision/
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  # Build e Push da Imagem
  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy para Desenvolvimento
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Development
        run: |
          echo "Deploying to development environment..."
          # Aqui você pode adicionar comandos para deploy
          # Por exemplo: kubectl apply, docker-compose, etc.

  # Deploy para Produção
  deploy-prod:
    needs: [build, deploy-dev]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Aqui você pode adicionar comandos para deploy em produção
          # Por exemplo: kubectl apply, docker-compose -f docker-compose.prod.yml, etc.

  # Monitoramento e Alertas
  monitor:
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Health Check
        run: |
          echo "Performing health checks..."
          # Verificar se os serviços estão rodando
          
      - name: 🚨 Send notifications
        run: |
          echo "Sending deployment notifications..."
          # Enviar notificações para Slack, email, etc.