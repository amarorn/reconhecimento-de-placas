name: üöÄ Deploy Documentation

on:
  push:
    branches: [main, develop, refactor-vision-architecture]
    paths: ['docs/**', '.github/workflows/docs.yml', 'README_ARQUITETURA.md']
  pull_request:
    branches: [main, develop]
    paths: ['docs/**', '.github/workflows/docs.yml']

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
      
      - name: üîç Validate documentation structure
        run: |
          echo "üîç Validando estrutura da documenta√ß√£o..."
          
          # Verificar se os arquivos principais existem
          if [ ! -f "docs/README.md" ]; then
            echo "‚ùå docs/README.md n√£o encontrado"
            exit 1
          fi
          
          if [ ! -f "docs/getting-started/quick-start.md" ]; then
            echo "‚ùå docs/getting-started/quick-start.md n√£o encontrado"
            exit 1
          fi
          
          if [ ! -f "docs/architecture/overview.md" ]; then
            echo "‚ùå docs/architecture/overview.md n√£o encontrado"
            exit 1
          fi
          
          echo "‚úÖ Estrutura da documenta√ß√£o validada"
      
      - name: üìù Generate API documentation
        run: |
          echo "üìù Gerando documenta√ß√£o da API..."
          
          # Criar script tempor√°rio para gerar docs
          cat > generate_docs.py << 'EOF'
          import json
          import os
          from pathlib import Path
          
          def generate_api_docs():
              """Gera documenta√ß√£o da API automaticamente"""
              try:
                  # Verificar se o m√≥dulo vision.api existe
                  import sys
                  sys.path.append('.')
                  
                  # Tentar importar e gerar docs
                  try:
                      from vision.api.api_server import get_app
                      app = get_app()
                      
                      # Salvar especifica√ß√£o OpenAPI
                      openapi_spec = app.openapi()
                      
                      docs_dir = Path("docs/api-reference")
                      docs_dir.mkdir(parents=True, exist_ok=True)
                      
                      with open(docs_dir / "openapi.json", "w") as f:
                          json.dump(openapi_spec, f, indent=2)
                      
                      print("‚úÖ Documenta√ß√£o da API gerada com sucesso")
                      
                  except ImportError as e:
                      print(f"‚ö†Ô∏è M√≥dulo vision.api n√£o dispon√≠vel: {e}")
                      print("üìù Criando documenta√ß√£o b√°sica da API...")
                      
                      # Criar documenta√ß√£o b√°sica
                      docs_dir = Path("docs/api-reference")
                      docs_dir.mkdir(parents=True, exist_ok=True)
                      
                      basic_docs = {
                          "info": {
                              "title": "API de Reconhecimento de Placas",
                              "version": "2.0.0",
                              "description": "API para detec√ß√£o e OCR de placas de ve√≠culos e sinais de tr√¢nsito"
                          },
                          "paths": {
                              "/health": {
                                  "get": {
                                      "summary": "Health Check",
                                      "description": "Verifica o status da API"
                                  }
                              },
                              "/api/v1/upload": {
                                  "post": {
                                      "summary": "Upload de Imagem",
                                      "description": "Processa imagem para detec√ß√£o e OCR"
                                  }
                              }
                          }
                      }
                      
                      with open(docs_dir / "openapi.json", "w") as f:
                          json.dump(basic_docs, f, indent=2)
                      
                      print("‚úÖ Documenta√ß√£o b√°sica da API criada")
              
              except Exception as e:
                  print(f"‚ùå Erro ao gerar documenta√ß√£o: {e}")
                  return False
              
              return True
          
          if __name__ == "__main__":
              generate_api_docs()
          EOF
          
          python generate_docs.py
      
      - name: üîó Validate internal links
        run: |
          echo "üîó Validando links internos da documenta√ß√£o..."
          
          # Script simples para validar links Markdown
          cat > validate_links.py << 'EOF'
          import re
          import os
          from pathlib import Path
          
          def validate_markdown_links():
              """Valida links internos em arquivos Markdown"""
              docs_dir = Path("docs")
              errors = []
              
              for md_file in docs_dir.rglob("*.md"):
                  with open(md_file, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Encontrar links internos [texto](arquivo.md)
                  links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
                  
                  for link_text, link_path in links:
                      if link_path.startswith('http'):
                          continue  # Links externos
                      
                      if link_path.startswith('#'):
                          continue  # Links para se√ß√µes
                      
                      # Resolver caminho relativo
                      if link_path.startswith('./'):
                          link_path = link_path[2:]
                      
                      target_path = md_file.parent / link_path
                      
                      if not target_path.exists():
                          errors.append(f"‚ùå {md_file}: Link quebrado '{link_text}' -> '{link_path}'")
              
              if errors:
                  print("‚ùå Links quebrados encontrados:")
                  for error in errors:
                      print(f"  {error}")
                  return False
              else:
                  print("‚úÖ Todos os links internos est√£o v√°lidos")
                  return True
          
          if __name__ == "__main__":
              validate_markdown_links()
          EOF
          
          python validate_links.py
      
      - name: üìä Create documentation index
        run: |
          echo "üìä Criando √≠ndice da documenta√ß√£o..."
          
          # Criar arquivo de √≠ndice para GitHub Pages
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Documenta√ß√£o - Reconhecimento de Placas</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f6f8fa; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  h1 { color: #24292e; text-align: center; margin-bottom: 30px; }
                  .nav { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }
                  .nav-card { background: #f1f3f4; padding: 20px; border-radius: 6px; text-decoration: none; color: #24292e; transition: all 0.2s; }
                  .nav-card:hover { background: #e1e4e8; transform: translateY(-2px); }
                  .nav-card h3 { margin: 0 0 10px 0; color: #0366d6; }
                  .nav-card p { margin: 0; color: #586069; font-size: 14px; }
                  .footer { text-align: center; margin-top: 40px; color: #586069; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Documenta√ß√£o - Reconhecimento de Placas</h1>
                  
                  <div class="nav">
                      <a href="README.md" class="nav-card">
                          <h3>üìñ Vis√£o Geral</h3>
                          <p>Documenta√ß√£o principal com navega√ß√£o completa</p>
                      </a>
                      
                      <a href="getting-started/quick-start.md" class="nav-card">
                          <h3>üöÄ In√≠cio R√°pido</h3>
                          <p>Configure e execute o projeto em 5 minutos</p>
                      </a>
                      
                      <a href="architecture/overview.md" class="nav-card">
                          <h3>üèóÔ∏è Arquitetura</h3>
                          <p>Vis√£o geral da arquitetura e princ√≠pios de design</p>
                      </a>
                      
                      <a href="api-reference/openapi.json" class="nav-card">
                          <h3>üîß API Reference</h3>
                          <p>Especifica√ß√£o OpenAPI da API REST</p>
                      </a>
                  </div>
                  
                  <div class="footer">
                      <p>üìö Documenta√ß√£o gerada automaticamente via GitHub Actions</p>
                      <p>üîÑ √öltima atualiza√ß√£o: $(date)</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "‚úÖ √çndice da documenta√ß√£o criado"
      
      - name: üöÄ Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'üìö docs: atualiza documenta√ß√£o via GitHub Actions'
      
      - name: üìù Create deployment summary
        run: |
          echo "## üìö Deploy da Documenta√ß√£o" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status**: Documenta√ß√£o validada e preparada" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Arquivos processados**: $(find docs -name '*.md' | wc -l) arquivos Markdown" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Links validados**: Todos os links internos est√£o funcionando" >> $GITHUB_STEP_SUMMARY
          echo "üìñ **API docs**: Documenta√ß√£o da API gerada automaticamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "üöÄ **Deploy**: Publicado no GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "üåê **URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîç **Deploy**: Apenas valida√ß√£o (branch de feature)" >> $GITHUB_STEP_SUMMARY
          fi
