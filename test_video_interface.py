#!/usr/bin/env python3

import os
import sys
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_interface_files():
    """Testa se os arquivos da interface de v√≠deo existem e est√£o corretos"""
    
    print("üß™ Testando Interface de V√≠deo")
    print("=" * 50)
    
    # Verificar arquivos principais
    files_to_check = [
        "vision_interface.html",
        "vision/api/endpoints.py",
        "vision/api/models.py",
        "vision/api/auth.py",
        "vision/api/api_server.py"
    ]
    
    all_files_exist = True
    for file_path in files_to_check:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - N√ÉO ENCONTRADO")
            all_files_exist = False
    
    if not all_files_exist:
        print("\n‚ùå Alguns arquivos essenciais n√£o foram encontrados!")
        return False
    
    print("\n‚úÖ Todos os arquivos principais existem!")
    
    # Verificar funcionalidades espec√≠ficas
    print("\nüîç Verificando funcionalidades...")
    
    # 1. Verificar se a interface HTML tem funcionalidade de v√≠deo
    try:
        with open("vision_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
            
        video_features = [
            "selectFileType('video')",
            "processVideo()",
            "video_file",
            "video-analysis",
            "tracking-stats"
        ]
        
        missing_features = []
        for feature in video_features:
            if feature not in html_content:
                missing_features.append(feature)
        
        if missing_features:
            print(f"‚ùå Funcionalidades de v√≠deo ausentes: {missing_features}")
            return False
        else:
            print("‚úÖ Interface HTML com funcionalidade de v√≠deo")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar interface HTML: {e}")
        return False
    
    # 2. Verificar se os endpoints de v√≠deo existem
    try:
        with open("vision/api/endpoints.py", "r", encoding="utf-8") as f:
            endpoints_content = f.read()
            
        if "process_video" in endpoints_content:
            print("‚úÖ Endpoint de processamento de v√≠deo encontrado")
        else:
            print("‚ùå Endpoint de processamento de v√≠deo n√£o encontrado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar endpoints: {e}")
        return False
    
    # 3. Verificar se os modelos necess√°rios existem
    try:
        with open("vision/api/models.py", "r", encoding="utf-8") as f:
            models_content = f.read()
            
        required_models = ["ImageRequest", "ProcessResponse"]
        missing_models = []
        
        for model in required_models:
            if model not in models_content:
                missing_models.append(model)
        
        if missing_models:
            print(f"‚ùå Modelos ausentes: {missing_models}")
            return False
        else:
            print("‚úÖ Modelos necess√°rios encontrados")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar modelos: {e}")
        return False
    
    # 4. Verificar se o servidor da API inclui os endpoints de v√≠deo
    try:
        with open("vision/api/api_server.py", "r", encoding="utf-8") as f:
            api_content = f.read()
            
        if "video_endpoints" in api_content and "Endpoints de an√°lise de v√≠deo adicionados" in api_content:
            print("‚úÖ Servidor da API configurado para v√≠deo")
        else:
            print("‚ùå Servidor da API n√£o configurado para v√≠deo")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar servidor da API: {e}")
        return False
    
    print("\nüéâ Interface de v√≠deo configurada com sucesso!")
    return True

def test_pothole_detector():
    """Testa se o PotholeDetector est√° funcionando"""
    
    print("\nüîç Testando PotholeDetector...")
    
    try:
        # Tentar importar o detector
        sys.path.append(str(Path(".")))
        from vision.detection.pothole_detector import PotholeDetector
        
        print("‚úÖ PotholeDetector importado com sucesso")
        
        # Verificar se tem funcionalidade de v√≠deo
        detector_methods = dir(PotholeDetector)
        video_methods = ["process_video", "get_tracking_statistics"]
        
        missing_methods = []
        for method in video_methods:
            if method not in detector_methods:
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå M√©todos de v√≠deo ausentes: {missing_methods}")
            return False
        else:
            print("‚úÖ PotholeDetector com funcionalidade de v√≠deo")
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar PotholeDetector: {e}")
        print("   (Isso √© esperado se as depend√™ncias n√£o estiverem instaladas)")
        return True  # Considerar sucesso se for apenas depend√™ncia
    except Exception as e:
        print(f"‚ùå Erro ao testar PotholeDetector: {e}")
        return False

def test_configuration():
    """Testa se as configura√ß√µes est√£o corretas"""
    
    print("\n‚öôÔ∏è Testando configura√ß√µes...")
    
    # Verificar arquivo de configura√ß√£o
    config_file = "config/specialized_detectors.yaml"
    if Path(config_file).exists():
        print(f"‚úÖ Arquivo de configura√ß√£o encontrado: {config_file}")
        
        try:
            # Tentar ler como texto simples primeiro
            with open(config_file, "r", encoding="utf-8") as f:
                config_content = f.read()
            
            if "video_analysis" in config_content:
                print("‚úÖ Configura√ß√£o de an√°lise de v√≠deo encontrada")
                return True
            else:
                print("‚ùå Configura√ß√£o de an√°lise de v√≠deo n√£o encontrada")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao ler configura√ß√£o: {e}")
            return False
    else:
        print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_file}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    
    print("üöÄ Teste da Interface de V√≠deo - PotholeDetector")
    print("=" * 60)
    
    tests = [
        ("Arquivos da Interface", test_interface_files),
        ("PotholeDetector", test_pothole_detector),
        ("Configura√ß√µes", test_configuration)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ Executando: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro durante teste {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM! Interface de v√≠deo funcionando!")
        print("\nüí° Para usar:")
        print("   1. Abra vision_interface.html no navegador")
        print("   2. Fa√ßa login (admin/admin123)")
        print("   3. Selecione 'V√≠deo' como tipo de arquivo")
        print("   4. Fa√ßa upload de um v√≠deo")
        print("   5. Clique em 'Processar Arquivo'")
        print("\nüîß Para testar a API:")
        print("   - Endpoint: POST /vision/process_video")
        print("   - Autentica√ß√£o: Bearer token")
        print("   - Formato: multipart/form-data com video_file")
        
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam. Verifique os erros acima.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
