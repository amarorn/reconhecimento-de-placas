#!/usr/bin/env python3
"""
Sistema Dual de Processamento: Sinaliza√ß√£o + Ve√≠culos
====================================================

Este arquivo agora possui DUAS funcionalidades COMPLETAMENTE SEPARADAS:

1. üö¶ PROCESSAMENTO DE SINALIZA√á√ÉO:
   - Foca APENAS em placas de sinaliza√ß√£o de tr√¢nsito
   - Gera relat√≥rios HTML e JSON APENAS para sinaliza√ß√£o
   - NUNCA inclui placas de ve√≠culos

2. üöó PROCESSAMENTO DE VE√çCULOS:
   - Foca APENAS em placas de ve√≠culos
   - Gera relat√≥rios APENAS para placas de ve√≠culos
   - NUNCA inclui placas de sinaliza√ß√£o

SEPARA√á√ÉO TOTAL: Zero mistura entre os dois tipos!
"""

import cv2
import numpy as np
import os
import re
import json
from datetime import datetime
from typing import Dict, List, Tuple, Optional

# Importar a base de dados de sinaliza√ß√£o
try:
    import base_dados_sinalizacao
    BASE_DADOS_AVAILABLE = True
    print("‚úÖ Base de dados de sinaliza√ß√£o carregada com sucesso!")
except ImportError:
    BASE_DADOS_AVAILABLE = False
    print("‚ö†Ô∏è  Base de dados de sinaliza√ß√£o n√£o encontrada. Usando dados b√°sicos.")

# Importar a base de dados espec√≠fica das imagens
try:
    import base_dados_imagens_sinalizacao
    BASE_IMAGENS_AVAILABLE = True
    print("‚úÖ Base de dados de imagens espec√≠ficas carregada com sucesso!")
except ImportError:
    BASE_IMAGENS_AVAILABLE = False
    print("‚ö†Ô∏è  Base de dados de imagens espec√≠ficas n√£o encontrada.")

class SinalizacaoProcessor:
    """Processador independente para placas de sinaliza√ß√£o brasileiras"""
    
    def __init__(self):
        # Configura√ß√µes espec√≠ficas para sinaliza√ß√£o
        self.config = {
            'min_area': 500,  # √Årea m√≠nima para detec√ß√£o
            'color_threshold': 5.0,  # % m√≠nimo de cor para detec√ß√£o
            'shape_approximation': 0.02,  # Precis√£o da aproxima√ß√£o de formas
            'text_confidence_threshold': 0.6  # Confian√ßa m√≠nima para texto
        }
        
        # Carregar base de dados oficial se dispon√≠vel
        if BASE_DADOS_AVAILABLE:
            self.sinalizacao_database = base_dados_sinalizacao.SINALIZACAO_DATABASE
            self.codigos_oficiais = base_dados_sinalizacao.CODIGOS_OFICIAIS
            print(f"üìä Base de dados carregada: {len(self.sinalizacao_database)} placas")
            print(f"üî¢ C√≥digos oficiais: {len(self.codigos_oficiais)} c√≥digos")
        else:
            # Dicion√°rio b√°sico de significados das placas de sinaliza√ß√£o brasileiras
            self.sinalizacao_database = {}
            self.codigos_oficiais = {}
            self.sinalizacao_significados = {
                'pare': {
                    'nome': 'PARE',
                    'codigo': 'R-1',
                    'significado': 'Parada obrigat√≥ria. O ve√≠culo deve parar completamente antes de prosseguir.',
                    'acao': 'Parar completamente',
                    'penalidade': 'Multa e pontos na carteira',
                    'cores': ['vermelho'],
                    'formas': ['octogonal'],
                    'tipo': 'obrigatorio'
                },
                'stop': {
                    'nome': 'STOP',
                    'codigo': 'R-1',
                    'significado': 'Parada obrigat√≥ria (termo em ingl√™s). Mesmo significado da placa PARE.',
                    'acao': 'Parar completamente',
                    'penalidade': 'Multa e pontos na carteira',
                    'cores': ['vermelho'],
                    'formas': ['octogonal'],
                    'tipo': 'obrigatorio'
                }
            }
        
        # Padr√µes de sinaliza√ß√£o brasileira (SEM depend√™ncias de placas de ve√≠culos)
        self.sinalizacao_types = {
            'obrigatorio': {
                'pare': {'colors': ['vermelho'], 'shapes': ['octogonal'], 'text': 'PARE'},
                'stop': {'colors': ['vermelho'], 'shapes': ['octogonal'], 'text': 'STOP'},
                'proibido': {'colors': ['vermelho'], 'shapes': ['circular'], 'text': 'PROIBIDO'}
            },
            'regulamentacao': {
                'velocidade': {'colors': ['azul'], 'shapes': ['circular'], 'text': 'KM/H'},
                'direcao': {'colors': ['azul'], 'shapes': ['retangular'], 'text': 'DIRE√á√ÉO'},
                'estacionamento': {'colors': ['azul'], 'shapes': ['retangular'], 'text': 'ESTACIONAMENTO'}
            },
            'advertencia': {
                'curva': {'colors': ['amarelo'], 'shapes': ['triangular'], 'text': 'CURVA'},
                'cruzamento': {'colors': ['amarelo'], 'shapes': ['triangular'], 'text': 'CRUZAMENTO'},
                'escola': {'colors': ['amarelo'], 'shapes': ['triangular'], 'text': 'ESCOLA'}
            },
            'informacao': {
                'rua': {'colors': ['azul'], 'shapes': ['retangular'], 'text': 'RUA'},
                'avenida': {'colors': ['azul'], 'shapes': ['retangular'], 'text': 'AVENIDA'},
                'pra√ßa': {'colors': ['azul'], 'shapes': ['retangular'], 'text': 'PRA√áA'}
            }
        }
        
        # Cores espec√≠ficas de sinaliza√ß√£o (otimizadas para placas brasileiras)
        self.sinalizacao_colors = {
            'vermelho': {
                'lower': np.array([0, 100, 100]),
                'upper': np.array([10, 255, 255]),
                'description': 'Pare, Proibido, Obrigat√≥rio'
            },
            'azul': {
                'lower': np.array([100, 100, 100]),
                'upper': np.array([130, 255, 255]),
                'description': 'Regulamenta√ß√£o, Informa√ß√£o, Dire√ß√£o'
            },
            'amarelo': {
                'lower': np.array([20, 100, 100]),
                'upper': np.array([30, 255, 255]),
                'description': 'Advert√™ncia, Perigo'
            },
            'verde': {
                'lower': np.array([40, 100, 100]),
                'upper': np.array([80, 255, 255]),
                'description': 'Informa√ß√£o, Dire√ß√£o'
            },
            'branco': {
                'lower': np.array([0, 0, 200]),
                'upper': np.array([180, 30, 255]),
                'description': 'Texto, Fundo'
            }
        }
        
        # Formas espec√≠ficas de sinaliza√ß√£o
        self.sinalizacao_shapes = {
            'triangular': {'vertices': 3, 'type': 'advertencia'},
            'circular': {'vertices': 'circular', 'type': 'regulamentacao'},
            'retangular': {'vertices': 4, 'type': 'informacao'},
            'octogonal': {'vertices': 8, 'type': 'obrigatorio'},
            'diamante': {'vertices': 4, 'type': 'advertencia'}
        }
    
    def is_sinalizacao_plate(self, image_path: str) -> bool:
        """Verifica se a imagem √© uma placa de sinaliza√ß√£o (N√ÉO de ve√≠culo)"""
        filename = os.path.basename(image_path).lower()
        
        # Filtrar APENAS placas de ve√≠culos - N√ÉO processar
        vehicle_keywords = ['placa', 'teste_placa', 'abc', 'def', 'ghi', 'xyz', 'carro', 'veiculo', 'automovel']
        for keyword in vehicle_keywords:
            if keyword in filename:
                return False
        
        # Verificar se √© uma imagem de sinaliza√ß√£o
        sinalizacao_keywords = ['sinal', 'sinalizacao', 'transito', 'rua', 'avenida', 'pare', 'stop', 'proibido']
        for keyword in sinalizacao_keywords:
            if keyword in filename:
                return True
        
        # Se n√£o tem palavras-chave espec√≠ficas, analisar o conte√∫do
        try:
            image = cv2.imread(image_path)
            if image is not None:
                # Detectar cores dominantes
                colors = self.detect_colors(image)
                shapes = self.detect_shapes(image)
                
                # Se tem cores t√≠picas de sinaliza√ß√£o (vermelho, azul, amarelo)
                sinalizacao_colors = ['vermelho', 'azul', 'amarelo']
                has_sinalizacao_colors = any(color in colors for color in sinalizacao_colors)
                
                # Se tem formas t√≠picas de sinaliza√ß√£o
                sinalizacao_shapes = ['triangular', 'circular', 'octogonal']
                has_sinalizacao_shapes = any(shape in shapes for shape in sinalizacao_shapes)
                
                return has_sinalizacao_colors or has_sinalizacao_shapes
        except:
            pass
        
        return False
    
    def identify_sinalizacao_type(self, colors: List[str], shapes: List[str], image_path: str = None) -> Dict:
        """Identifica o tipo espec√≠fico de placa de sinaliza√ß√£o"""
        
        # Primeiro, tentar identificar pela base de dados espec√≠fica das imagens
        if BASE_IMAGENS_AVAILABLE and image_path:
            # Tentar identificar pela imagem espec√≠fica
            info_imagem = base_dados_imagens_sinalizacao.obter_info_por_imagem(image_path)
            if info_imagem:
                return {
                    'nome': info_imagem['nome'],
                    'significado': info_imagem['significado'],
                    'acao': info_imagem['acao'],
                    'penalidade': info_imagem['penalidade'],
                    'cores': colors,
                    'formas': shapes,
                    'tipo': info_imagem['tipo'],
                    'codigo_oficial': info_imagem.get('codigo_oficial', 'N/A')
                }
            
            # Tentar identificar por caracter√≠sticas visuais
            info_caracteristicas = base_dados_imagens_sinalizacao.identificar_placa_por_caracteristicas(colors, shapes)
            if info_caracteristicas:
                return {
                    'nome': info_caracteristicas['nome'],
                    'significado': info_caracteristicas['significado'],
                    'acao': info_caracteristicas['acao'],
                    'penalidade': info_caracteristicas['penalidade'],
                    'cores': colors,
                    'formas': shapes,
                    'tipo': info_caracteristicas['tipo'],
                    'codigo_oficial': info_caracteristicas.get('codigo_oficial', 'N/A')
                }
        
        # Se n√£o conseguir identificar pela base espec√≠fica, usar l√≥gica gen√©rica
        if 'vermelho' in colors and 'octogonal' in shapes:
            return {
                'nome': 'PARE',
                'significado': 'Parada obrigat√≥ria. O ve√≠culo deve parar completamente antes de prosseguir.',
                'acao': 'Parar completamente',
                'penalidade': 'Multa e pontos na carteira',
                'cores': colors,
                'formas': shapes,
                'tipo': 'obrigatorio',
                'codigo_oficial': 'R-1'
            }
        elif 'vermelho' in colors and 'circular' in shapes:
            return {
                'nome': 'PROIBI√á√ÉO',
                'significado': 'Proibi√ß√£o espec√≠fica. Verificar placa para detalhes.',
                'acao': 'Seguir a proibi√ß√£o indicada',
                'penalidade': 'Multa e pontos na carteira',
                'cores': colors,
                'formas': shapes,
                'tipo': 'obrigatorio',
                'codigo_oficial': 'R-6'
            }
        elif 'azul' in colors and 'circular' in shapes:
            return {
                'nome': 'REGULAMENTA√á√ÉO',
                'significado': 'Regulamenta√ß√£o espec√≠fica. Verificar placa para detalhes.',
                'acao': 'Seguir a regulamenta√ß√£o indicada',
                'penalidade': 'Multa e pontos na carteira',
                'cores': colors,
                'formas': shapes,
                'tipo': 'regulamentacao',
                'codigo_oficial': 'R-19'
            }
        elif 'amarelo' in colors and 'triangular' in shapes:
            return {
                'nome': 'ADVERT√äNCIA',
                'significado': 'Advert√™ncia de perigo √† frente. Reduzir velocidade e ter aten√ß√£o.',
                'acao': 'Reduzir velocidade e ter cuidado',
                'penalidade': 'N√£o aplic√°vel (advert√™ncia)',
                'cores': colors,
                'formas': shapes,
                'tipo': 'advertencia',
                'codigo_oficial': 'A-1'
            }
        else:
            # Tipo gen√©rico baseado na cor dominante
            if 'vermelho' in colors:
                return {
                    'nome': 'SINALIZA√á√ÉO VERMELHA',
                    'significado': 'Placa de regulamenta√ß√£o ou obriga√ß√£o. Aten√ß√£o especial.',
                    'acao': 'Seguir as instru√ß√µes da placa',
                    'penalidade': 'Multa e pontos na carteira',
                    'cores': colors,
                    'formas': shapes,
                    'tipo': 'obrigatorio',
                    'codigo_oficial': 'R-GEN'
                }
            elif 'azul' in colors:
                return {
                    'nome': 'SINALIZA√á√ÉO AZUL',
                    'significado': 'Placa de regulamenta√ß√£o ou informa√ß√£o. Seguir orienta√ß√µes.',
                    'acao': 'Seguir as instru√ß√µes da placa',
                    'penalidade': 'Multa e pontos na carteira',
                    'cores': colors,
                    'formas': shapes,
                    'tipo': 'regulamentacao',
                    'codigo_oficial': 'R-GEN'
                }
            elif 'amarelo' in colors:
                return {
                    'nome': 'SINALIZA√á√ÉO AMARELA',
                    'significado': 'Placa de advert√™ncia. Reduzir velocidade e ter aten√ß√£o.',
                    'acao': 'Reduzir velocidade e ter cuidado',
                    'penalidade': 'N√£o aplic√°vel (advert√™ncia)',
                    'cores': colors,
                    'formas': shapes,
                    'tipo': 'advertencia',
                    'codigo_oficial': 'A-GEN'
                }
            else:
                return {
                    'nome': 'SINALIZA√á√ÉO GEN√âRICA',
                    'significado': 'Placa de sinaliza√ß√£o n√£o identificada especificamente.',
                    'acao': 'Observar e seguir orienta√ß√µes',
                    'penalidade': 'Verificar tipo espec√≠fico',
                    'cores': colors,
                    'formas': shapes,
                    'tipo': 'desconhecido',
                    'codigo_oficial': 'GEN'
                }
    
    def create_test_sinalizacao(self, tipo: str, texto: str = "PARE") -> str:
        """Cria imagem de teste espec√≠fica para sinaliza√ß√£o"""
        # Criar imagem com fundo branco
        img = np.ones((400, 600, 3), dtype=np.uint8) * 255
        
        if tipo == 'pare':
            # Placa octogonal vermelha (PARE)
            color = (0, 0, 255)  # Vermelho BGR
            points = np.array([
                [300, 50], [350, 100], [350, 200], [300, 250],
                [250, 250], [200, 200], [200, 100], [250, 50]
            ], np.int32)
            cv2.fillPoly(img, [points], color)
            cv2.putText(img, texto, (220, 170), 
                        cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 3)
            
        elif tipo == 'proibido':
            # Placa circular vermelha com barra
            color = (0, 0, 255)
            cv2.circle(img, (300, 200), 100, color, -1)
            cv2.line(img, (220, 120), (380, 280), (255, 255, 255), 15)
            cv2.putText(img, texto, (200, 320), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
            
        elif tipo == 'velocidade':
            # Placa circular azul
            color = (255, 0, 0)  # Azul BGR
            cv2.circle(img, (300, 200), 100, color, -1)
            cv2.putText(img, texto, (220, 170), 
                        cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 3)
            
        elif tipo == 'advertencia':
            # Placa triangular amarela
            color = (0, 255, 255)  # Amarelo BGR
            points = np.array([[300, 50], [200, 300], [400, 300]], np.int32)
            cv2.fillPoly(img, [points], color)
            cv2.putText(img, texto, (220, 250), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 0), 3)
            
        elif tipo == 'rua':
            # Placa retangular azul
            color = (255, 0, 0)  # Azul BGR
            cv2.rectangle(img, (100, 100), (500, 300), color, -1)
            cv2.putText(img, texto, (150, 200), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1.5, (255, 255, 255), 3)
        
        # Salvar imagem
        filename = f"sinalizacao_{tipo}_{texto.replace(' ', '_')}.jpg"
        cv2.imwrite(filename, img)
        
        return filename
    
    def detect_colors(self, image: np.ndarray) -> Dict[str, Dict]:
        """Detecta cores espec√≠ficas de sinaliza√ß√£o"""
        # Converter para HSV
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        
        color_detections = {}
        
        for color_name, color_range in self.sinalizacao_colors.items():
            # Criar m√°scara para a cor
            mask = cv2.inRange(hsv, color_range['lower'], color_range['upper'])
            
            # Contar pixels da cor
            pixel_count = cv2.countNonZero(mask)
            total_pixels = mask.shape[0] * mask.shape[1]
            percentage = (pixel_count / total_pixels) * 100
            
            if percentage > self.config['color_threshold']:
                color_detections[color_name] = {
                    'percentage': percentage,
                    'pixel_count': pixel_count,
                    'description': color_range['description'],
                    'mask': mask
                }
        
        return color_detections
    
    def detect_shapes(self, image: np.ndarray) -> Dict[str, Dict]:
        """Detecta formas espec√≠ficas de sinaliza√ß√£o"""
        # Converter para escala de cinza
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # Aplicar threshold adaptativo
        thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                     cv2.THRESH_BINARY, 11, 2)
        
        # Encontrar contornos
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        shape_detections = {}
        
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > self.config['min_area']:
                # Aproximar contorno
                epsilon = self.config['shape_approximation'] * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # Identificar forma
                vertices = len(approx)
                
                if vertices == 3:
                    shape_type = 'triangular'
                elif vertices == 4:
                    # Verificar se √© quadrado ou ret√¢ngulo
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = float(w)/h
                    if 0.8 <= aspect_ratio <= 1.2:
                        shape_type = 'quadrado'
                    else:
                        shape_type = 'retangular'
                elif vertices == 8:
                    shape_type = 'octogonal'
                elif vertices > 8:
                    # Verificar se √© circular
                    perimeter = cv2.arcLength(contour, True)
                    circularity = 4 * np.pi * area / (perimeter * perimeter)
                    if circularity > 0.8:
                        shape_type = 'circular'
                    else:
                        shape_type = 'irregular'
                else:
                    shape_type = 'irregular'
                
                shape_detections[shape_type] = {
                    'area': area,
                    'vertices': vertices,
                    'contour': contour,
                    'approx': approx,
                    'type': self.sinalizacao_shapes.get(shape_type, {}).get('type', 'desconhecido')
                }
        
        return shape_detections
    
    def analyze_sinalizacao_type(self, colors: Dict, shapes: Dict) -> Dict[str, object]:
        """Analisa o tipo de sinaliza√ß√£o baseado nas cores e formas"""
        analysis: Dict[str, object] = {
            'primary_type': 'desconhecido',
            'secondary_type': 'desconhecido',
            'confidence': 0.0,
            'description': 'Tipo n√£o identificado'
        }
        
        # An√°lise baseada em cores dominantes
        if 'vermelho' in colors:
            if 'octogonal' in shapes:
                analysis['primary_type'] = 'obrigatorio'
                analysis['secondary_type'] = 'pare'
                analysis['confidence'] = 0.9
                analysis['description'] = 'Pare (Obrigat√≥rio) - Placa octogonal vermelha'
            elif 'circular' in shapes:
                analysis['primary_type'] = 'obrigatorio'
                analysis['secondary_type'] = 'proibido'
                analysis['confidence'] = 0.85
                analysis['description'] = 'Proibido (Obrigat√≥rio) - Placa circular vermelha'
            else:
                analysis['primary_type'] = 'obrigatorio'
                analysis['secondary_type'] = 'regulamentacao'
                analysis['confidence'] = 0.7
                analysis['description'] = 'Regulamenta√ß√£o (Vermelho) - Placa obrigat√≥ria'
        
        elif 'azul' in colors:
            if 'circular' in shapes:
                analysis['primary_type'] = 'regulamentacao'
                analysis['secondary_type'] = 'velocidade'
                analysis['confidence'] = 0.8
                analysis['description'] = 'Velocidade (Regulamenta√ß√£o) - Placa circular azul'
            elif 'retangular' in shapes:
                analysis['primary_type'] = 'informacao'
                analysis['secondary_type'] = 'direcao'
                analysis['confidence'] = 0.75
                analysis['description'] = 'Dire√ß√£o/Informa√ß√£o - Placa retangular azul'
            else:
                analysis['primary_type'] = 'regulamentacao'
                analysis['secondary_type'] = 'geral'
                analysis['confidence'] = 0.6
                analysis['description'] = 'Regulamenta√ß√£o (Azul) - Placa de dire√ß√£o'
        
        elif 'amarelo' in colors:
            if 'triangular' in shapes:
                analysis['primary_type'] = 'advertencia'
                analysis['secondary_type'] = 'perigo'
                analysis['confidence'] = 0.85
                analysis['description'] = 'Advert√™ncia (Amarelo) - Placa triangular de perigo'
            else:
                analysis['primary_type'] = 'advertencia'
                analysis['secondary_type'] = 'geral'
                analysis['confidence'] = 0.7
                analysis['description'] = 'Advert√™ncia (Amarelo) - Placa de aviso'
        
        elif 'verde' in colors:
            analysis['primary_type'] = 'informacao'
            analysis['secondary_type'] = 'direcao'
            analysis['confidence'] = 0.7
            analysis['description'] = 'Informa√ß√£o (Verde) - Placa de dire√ß√£o'
        
        return analysis
    
    def process_sinalizacao_image(self, image_path: str) -> Dict:
        """Processa uma imagem de placa de sinaliza√ß√£o"""
        # Verificar se √© realmente uma placa de sinaliza√ß√£o
        if not self.is_sinalizacao_plate(image_path):
            return {
                'image_path': image_path,
                'is_sinalizacao': False,
                'message': 'Esta imagem n√£o √© uma placa de sinaliza√ß√£o (poss√≠vel placa de ve√≠culo)'
            }
        
        # Carregar imagem
        image = cv2.imread(image_path)
        if image is None:
            return {'error': 'Imagem n√£o carregada', 'image_path': image_path}
        
        # Detectar cores
        color_detections = self.detect_colors(image)
        
        # Detectar formas
        shape_detections = self.detect_shapes(image)
        
        # Analisar tipo de sinaliza√ß√£o
        type_analysis = self.analyze_sinalizacao_type(color_detections, shape_detections)
        
        # Identificar tipo espec√≠fico e significado - USAR BASE DE DADOS ESPEC√çFICA
        colors_list = list(color_detections.keys())
        shapes_list = list(shape_detections.keys())
        
        # PRIORIDADE: Usar base de dados espec√≠fica das imagens
        info_imagem = None
        if BASE_IMAGENS_AVAILABLE:
            info_imagem = base_dados_imagens_sinalizacao.obter_info_por_imagem(image_path)
            if info_imagem:
                # Usar informa√ß√µes da base de dados espec√≠fica
                sinalizacao_info = {
                    'nome': info_imagem['nome'],
                    'significado': info_imagem['significado'],
                    'acao': info_imagem['acao'],
                    'penalidade': info_imagem['penalidade'],
                    'cores': info_imagem['cores'],  # Usar cores da base de dados
                    'formas': info_imagem['formas'],  # Usar formas da base de dados
                    'tipo': info_imagem['tipo'],
                    'codigo_oficial': info_imagem.get('codigo_oficial', 'N/A')
                }
                confidence = 0.95  # Alta confian√ßa quando temos dados espec√≠ficos
            else:
                # Fallback para identifica√ß√£o autom√°tica
                sinalizacao_info = self.identify_sinalizacao_type(colors_list, shapes_list, image_path)
                confidence = type_analysis['confidence']
        else:
            # Fallback para identifica√ß√£o autom√°tica
            sinalizacao_info = self.identify_sinalizacao_type(colors_list, shapes_list, image_path)
            confidence = type_analysis['confidence']
        
        # Gerar resultado
        result = {
            'image_path': image_path,
            'timestamp': datetime.now().isoformat(),
            'is_sinalizacao': True,
            'image_info': {
                'width': image.shape[1],
                'height': image.shape[0],
                'channels': image.shape[2],
                'file_size': os.path.getsize(image_path)
            },
            'detection_results': {
                'colors': color_detections,
                'shapes': shape_detections,
                'type_analysis': type_analysis
            },
            'sinalizacao_info': sinalizacao_info,
            'sinalizacao_detected': True,
            'confidence': confidence,
            'base_dados_usada': 'especifica' if BASE_IMAGENS_AVAILABLE and info_imagem else 'automatica'
        }
        
        return result
    
    def process_batch_sinalizacao(self, image_folder: str = '.') -> List[Dict]:
        """Processa m√∫ltiplas imagens de sinaliza√ß√£o em lote (APENAS sinaliza√ß√£o)"""
        results = []
        
        # Filtrar apenas imagens
        image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff')
        image_files = [f for f in os.listdir(image_folder) 
                      if f.lower().endswith(image_extensions)]
        
        print(f"üö¶ PROCESSANDO APENAS PLACAS DE SINALIZA√á√ÉO BRASILEIRAS")
        print(f"üîç Total de imagens encontradas: {len(image_files)}")
        print("-" * 50)
        
        sinalizacao_count = 0
        vehicle_count = 0
        
        for i, image_file in enumerate(image_files, 1):
            print(f"\n[{i}/{len(image_files)}] Analisando: {image_file}")
            
            try:
                result = self.process_sinalizacao_image(image_file)
                results.append(result)
                
                if result.get('is_sinalizacao'):
                    sinalizacao_count += 1
                    sinalizacao_info = result['sinalizacao_info']
                    colors = list(result['detection_results']['colors'].keys())
                    shapes = list(result['detection_results']['shapes'].keys())
                    
                    print(f"   ‚úÖ PLACA DE SINALIZA√á√ÉO DETECTADA!")
                    print(f"      üö¶ Nome: {sinalizacao_info['nome']}")
                    print(f"      üìñ Significado: {sinalizacao_info['significado']}")
                    print(f"      ‚ö†Ô∏è  A√ß√£o: {sinalizacao_info['acao']}")
                    print(f"      üí∞ Penalidade: {sinalizacao_info['penalidade']}")
                    print(f"      üé® Cores: {', '.join(colors)}")
                    print(f"      üî∑ Formas: {', '.join(shapes)}")
                    print(f"      üéØ Confian√ßa: {result['confidence']:.2f}")
                else:
                    vehicle_count += 1
                    print(f"   üöó Placa de ve√≠culo (n√£o processada)")
                    
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
                results.append({'error': str(e), 'image': image_file})
        
        print(f"\nüéØ RESUMO DO FILTRO:")
        print(f"   ‚Ä¢ Total de imagens: {len(image_files)}")
        print(f"   ‚Ä¢ Placas de sinaliza√ß√£o: {sinalizacao_count} ‚úÖ")
        print(f"   ‚Ä¢ Placas de ve√≠culos: {vehicle_count} üöó (filtradas)")
        print(f"   ‚Ä¢ Erros: {len([r for r in results if 'error' in r])}")
        
        return results
    
    def generate_summary(self, results: list) -> Dict:
        """Gera resumo dos resultados de processamento (APENAS sinaliza√ß√£o)"""
        # Filtrar apenas resultados de sinaliza√ß√£o
        sinalizacao_results = [r for r in results if r.get('is_sinalizacao')]
        
        summary = {
            'total_images': len(results),
            'sinalizacao_images': len(sinalizacao_results),
            'vehicle_images': len(results) - len(sinalizacao_results),
            'successful_detections': len([r for r in sinalizacao_results if r.get('sinalizacao_detected')]),
            'errors': len([r for r in results if 'error' in r]),
            'colors_summary': {},
            'shapes_summary': {},
            'types_summary': {},
            'significados_summary': {},
            'confidence_stats': {
                'min': 1.0,
                'max': 0.0,
                'avg': 0.0
            }
        }
        
        confidences = []
        
        for result in sinalizacao_results:
            if result.get('sinalizacao_detected'):
                # Contar cores
                colors = result['detection_results']['colors']
                for color_name in colors:
                    summary['colors_summary'][color_name] = summary['colors_summary'].get(color_name, 0) + 1
                
                # Contar formas
                shapes = result['detection_results']['shapes']
                for shape_name in shapes:
                    summary['shapes_summary'][shape_name] = summary['shapes_summary'].get(shape_name, 0) + 1
                
                # Contar tipos
                type_info = result['detection_results']['type_analysis']
                primary_type = type_info['primary_type']
                summary['types_summary'][primary_type] = summary['types_summary'].get(primary_type, 0) + 1
                
                # Contar significados
                sinalizacao_info = result['sinalizacao_info']
                significado_name = sinalizacao_info['nome']
                summary['significados_summary'][significado_name] = summary['significados_summary'].get(significado_name, 0) + 1
                
                # Estat√≠sticas de confian√ßa
                confidences.append(type_info['confidence'])
        
        # Calcular estat√≠sticas de confian√ßa
        if confidences:
            summary['confidence_stats']['min'] = min(confidences)
            summary['confidence_stats']['max'] = max(confidences)
            summary['confidence_stats']['avg'] = sum(confidences) / len(confidences)
        
        return summary

    def buscar_por_codigo(self, codigo: str) -> Optional[Dict]:
        """Busca placa de sinaliza√ß√£o por c√≥digo oficial (ex: R-1, R-4a)"""
        if not BASE_DADOS_AVAILABLE:
            return None
            
        codigo = codigo.upper().strip()
        
        if codigo in self.codigos_oficiais:
            return self.codigos_oficiais[codigo]
        
        # Busca por c√≥digo similar
        for cod, info in self.codigos_oficiais.items():
            if codigo in cod or cod in codigo:
                return info
        
        return None
    
    def buscar_por_nome(self, nome: str) -> List[Dict]:
        """Busca placas de sinaliza√ß√£o por nome ou parte do nome"""
        if not BASE_DADOS_AVAILABLE:
            return []
            
        nome = nome.lower().strip()
        resultados = []
        
        for key, info in self.sinalizacao_database.items():
            if (nome in info.get('nome', '').lower() or 
                nome in info.get('significado', '').lower() or
                nome in info.get('acao', '').lower()):
                resultados.append(info)
        
        return resultados
    
    def listar_todos_codigos(self) -> List[Dict]:
        """Lista todas as placas com seus c√≥digos oficiais"""
        if not BASE_DADOS_AVAILABLE:
            return []
        return list(self.codigos_oficiais.values())
    
    def buscar_por_tipo(self, tipo: str) -> List[Dict]:
        """Busca placas por tipo (obrigatorio, regulamentacao, informacao)"""
        if not BASE_DADOS_AVAILABLE:
            return []
            
        tipo = tipo.lower().strip()
        resultados = []
        
        for info in self.sinalizacao_database.values():
            if tipo in info.get('tipo', '').lower():
                resultados.append(info)
        
        return resultados
    
    def buscar_por_cor(self, cor: str) -> List[Dict]:
        """Busca placas por cor dominante"""
        if not BASE_DADOS_AVAILABLE:
            return []
            
        cor = cor.lower().strip()
        resultados = []
        
        for info in self.sinalizacao_database.values():
            cores = info.get('cores', [])
            if cor in [c.lower() for c in cores]:
                resultados.append(info)
        
        return resultados
    
    def buscar_por_forma(self, forma: str) -> List[Dict]:
        """Busca placas por forma"""
        if not BASE_DADOS_AVAILABLE:
            return []
            
        forma = forma.lower().strip()
        resultados = []
        
        for info in self.sinalizacao_database.values():
            formas = info.get('formas', [])
            if forma in [f.lower() for f in formas]:
                resultados.append(info)
        
        return resultados

    def gerar_relatorio_completo(self, output_file: str = None) -> str:
        """Gera relat√≥rio completo com nome e c√≥digo de todas as placas"""
        if not BASE_DADOS_AVAILABLE:
            return "‚ùå Base de dados n√£o dispon√≠vel para gerar relat√≥rio"
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Organizar por tipo
        placas_por_tipo = {
            'regulamentacao': [],
            'advertencia': [],
            'obrigatorio': [],
            'informacao': []
        }
        
        for codigo, info in self.codigos_oficiais.items():
            tipo = info.get('tipo', 'desconhecido')
            if tipo in placas_por_tipo:
                placas_por_tipo[tipo].append({
                    'codigo': codigo,
                    'nome': info.get('nome', 'N/A'),
                    'significado': info.get('significado', 'N/A'),
                    'acao': info.get('acao', 'N/A'),
                    'penalidade': info.get('penalidade', 'N/A'),
                    'cores': info.get('cores', []),
                    'formas': info.get('formas', [])
                })
        
        # Gerar relat√≥rio
        relatorio = f"""# üö¶ RELAT√ìRIO COMPLETO DE SINALIZA√á√ÉO BRASILEIRA
## üìÖ Data de Gera√ß√£o: {timestamp}
## üìä Total de Placas: {len(self.codigos_oficiais)}

## üö¶ PLACAS DE REGULAMENTA√á√ÉO ({len(placas_por_tipo['regulamentacao'])})
"""
        
        for placa in sorted(placas_por_tipo['regulamentacao'], key=lambda x: x['codigo']):
            relatorio += f"""
### {placa['codigo']} - {placa['nome']}
- **Significado**: {placa['significado']}
- **A√ß√£o**: {placa['acao']}
- **Penalidade**: {placa['penalidade']}
- **Cores**: {', '.join(placa['cores'])}
- **Formas**: {', '.join(placa['formas'])}
"""
        
        relatorio += f"""
## ‚ö†Ô∏è PLACAS DE ADVERT√äNCIA ({len(placas_por_tipo['advertencia'])})
"""
        
        for placa in sorted(placas_por_tipo['advertencia'], key=lambda x: x['codigo']):
            relatorio += f"""
### {placa['codigo']} - {placa['nome']}
- **Significado**: {placa['significado']}
- **A√ß√£o**: {placa['acao']}
- **Penalidade**: {placa['penalidade']}
- **Cores**: {', '.join(placa['cores'])}
- **Formas**: {', '.join(placa['formas'])}
"""
        
        relatorio += f"""
## üö´ PLACAS OBRIGAT√ìRIAS ({len(placas_por_tipo['obrigatorio'])})
"""
        
        for placa in sorted(placas_por_tipo['obrigatorio'], key=lambda x: x['codigo']):
            relatorio += f"""
### {placa['codigo']} - {placa['nome']}
- **Significado**: {placa['significado']}
- **A√ß√£o**: {placa['acao']}
- **Penalidade**: {placa['penalidade']}
- **Cores**: {', '.join(placa['cores'])}
- **Formas**: {', '.join(placa['formas'])}
"""
        
        relatorio += f"""
## ‚ÑπÔ∏è PLACAS DE INFORMA√á√ÉO ({len(placas_por_tipo['informacao'])})
"""
        
        for placa in sorted(placas_por_tipo['informacao'], key=lambda x: x['codigo']):
            relatorio += f"""
### {placa['codigo']} - {placa['nome']}
- **Significado**: {placa['significado']}
- **A√ß√£o**: {placa['acao']}
- **Penalidade**: {placa['penalidade']}
- **Cores**: {', '.join(placa['cores'])}
- **Formas**: {', '.join(placa['formas'])}
"""
        
        # Resumo estat√≠stico
        relatorio += f"""
## üìä RESUMO ESTAT√çSTICO

### Por Tipo:
- **Regulamenta√ß√£o**: {len(placas_por_tipo['regulamentacao'])} placas
- **Advert√™ncia**: {len(placas_por_tipo['advertencia'])} placas  
- **Obrigat√≥rio**: {len(placas_por_tipo['obrigatorio'])} placas
- **Informa√ß√£o**: {len(placas_por_tipo['informacao'])} placas

### Por C√≥digo:
- **Placas R-**: {len([c for c in self.codigos_oficiais.keys() if c.startswith('R-')])} placas
- **Placas A-**: {len([c for c in self.codigos_oficiais.keys() if c.startswith('A-')])} placas

---
*Relat√≥rio gerado automaticamente pelo Sistema de Processamento de Sinaliza√ß√£o Brasileira*
"""
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(relatorio)
                print(f"‚úÖ Relat√≥rio salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio: {e}")
        
        return relatorio

    def gerar_relatorio_json(self, output_file: str = None) -> str:
        """Gera relat√≥rio em formato JSON com nome e c√≥digo"""
        if not BASE_DADOS_AVAILABLE:
            return "‚ùå Base de dados n√£o dispon√≠vel para gerar relat√≥rio"
        
        timestamp = datetime.now().isoformat()
        
        relatorio_json = {
            'metadata': {
                'titulo': 'Relat√≥rio de Sinaliza√ß√£o Brasileira',
                'data_geracao': timestamp,
                'total_placas': len(self.codigos_oficiais),
                'versao': '1.0'
            },
            'placas': {}
        }
        
        # Organizar por c√≥digo
        for codigo, info in self.codigos_oficiais.items():
            relatorio_json['placas'][codigo] = {
                'nome': info.get('nome', 'N/A'),
                'tipo': info.get('tipo', 'desconhecido'),
                'significado': info.get('significado', 'N/A'),
                'acao': info.get('acao', 'N/A'),
                'penalidade': info.get('penalidade', 'N/A'),
                'cores': info.get('cores', []),
                'formas': info.get('formas', []),
                'codigo_oficial': codigo
            }
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(relatorio_json, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ Relat√≥rio JSON salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio JSON: {e}")
        
        return json.dumps(relatorio_json, ensure_ascii=False, indent=2)

    def gerar_relatorio_html_sinalizacao(self, output_file: str = None) -> str:
        """Gera relat√≥rio HTML baseado APENAS nas imagens analisadas (NUNCA ve√≠culos)"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Primeiro, processar as imagens para obter dados reais
        print("üîç Analisando imagens para gerar relat√≥rio...")
        results = self.process_batch_sinalizacao()
        
        # Filtrar apenas resultados de sinaliza√ß√£o
        sinalizacao_results = [r for r in results if r.get('is_sinalizacao')]
        
        if not sinalizacao_results:
            return "‚ùå Nenhuma placa de sinaliza√ß√£o detectada nas imagens"
        
        # Organizar por tipo baseado no que foi detectado
        placas_por_tipo = {
            'regulamentacao': [],
            'advertencia': [],
            'obrigatorio': [],
            'informacao': []
        }
        
        for result in sinalizacao_results:
            if result.get('sinalizacao_detected'):
                sinalizacao_info = result['sinalizacao_info']
                colors = list(result['detection_results']['colors'].keys())
                shapes = list(result['detection_results']['shapes'].keys())
                
                # Determinar tipo baseado na an√°lise
                tipo = sinalizacao_info.get('tipo', 'desconhecido')
                if tipo not in placas_por_tipo:
                    tipo = 'desconhecido'
                
                placas_por_tipo[tipo].append({
                    'nome': sinalizacao_info.get('nome', 'N/A'),
                    'significado': sinalizacao_info.get('significado', 'N/A'),
                    'acao': sinalizacao_info.get('acao', 'N/A'),
                    'penalidade': sinalizacao_info.get('penalidade', 'N/A'),
                    'cores': colors,
                    'formas': shapes,
                    'imagem': result.get('image_path', 'N/A'),
                    'confianca': result.get('confidence', 0.0)
                })
        
        # Gerar HTML baseado no que foi detectado
        html_content = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üö¶ Relat√≥rio de Sinaliza√ß√£o Detectada</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; text-align: center; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        h2 {{ color: #34495e; border-left: 4px solid #3498db; padding-left: 15px; }}
        h3 {{ color: #2980b9; }}
        .stats {{ background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .placa {{ background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; }}
        .placa h4 {{ color: #e74c3c; margin-top: 0; }}
        .placa ul {{ margin: 5px 0; }}
        .placa li {{ margin: 5px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #7f8c8d; font-style: italic; }}
        .tipo-section {{ margin: 30px 0; }}
        .codigo {{ font-weight: bold; color: #e74c3c; }}
        .nome {{ font-weight: bold; color: #2c3e50; }}
        .imagem {{ font-style: italic; color: #7f8c8d; }}
        .confianca {{ color: #27ae60; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üö¶ RELAT√ìRIO DE SINALIZA√á√ÉO DETECTADA NAS IMAGENS</h1>
        
        <div class="stats">
            <h2>üìÖ Data de Gera√ß√£o: {timestamp}</h2>
            <h2>üìä Total de Placas de Sinaliza√ß√£o Detectadas: {len(sinalizacao_results)}</h2>
            <p><strong>‚ö†Ô∏è IMPORTANTE:</strong> Este relat√≥rio cont√©m APENAS placas detectadas nas imagens. Placas de ve√≠culos N√ÉO est√£o inclu√≠das.</p>
        </div>
"""
        
        # Adicionar se√ß√µes por tipo
        for tipo, placas in placas_por_tipo.items():
            if placas:  # S√≥ mostrar tipos que t√™m placas
                html_content += f"""
        <div class="tipo-section">
            <h2>üö¶ PLACAS DE {tipo.upper()} ({len(placas)} placas)</h2>
"""
                
                for placa in placas:
                    html_content += f"""
            <div class="placa">
                <h4><span class="nome">{placa['nome']}</span></h4>
                <ul>
                    <li><strong>Significado:</strong> {placa['significado']}</li>
                    <li><strong>A√ß√£o:</strong> {placa['acao']}</li>
                    <li><strong>Penalidade:</strong> {placa['penalidade']}</li>
                    <li><strong>Cores:</strong> {', '.join(placa['cores'])}</li>
                    <li><strong>Formas:</strong> {', '.join(placa['formas'])}</li>
                    <li><strong>Imagem:</strong> <span class="imagem">{placa['imagem']}</span></li>
                    <li><strong>Confian√ßa:</strong> <span class="confianca">{placa['confianca']:.2f}</span></li>
                </ul>
            </div>
"""
                
                html_content += """
        </div>
"""
        
        # Resumo estat√≠stico
        html_content += f"""
        <div class="stats">
            <h2>üìä RESUMO ESTAT√çSTICO - APENAS SINALIZA√á√ÉO DETECTADA</h2>
            
            <h3>Por Tipo:</h3>
            <ul>
"""
        
        for tipo, placas in placas_por_tipo.items():
            if placas:
                html_content += f"                <li><strong>{tipo.title()}:</strong> {len(placas)} placas</li>\n"
        
        html_content += f"""
            </ul>
            
            <h3>Estat√≠sticas Gerais:</h3>
            <ul>
                <li><strong>Total de imagens analisadas:</strong> {len(results)}</li>
                <li><strong>Placas de sinaliza√ß√£o detectadas:</strong> {len(sinalizacao_results)} ‚úÖ</li>
                <li><strong>Placas de ve√≠culos filtradas:</strong> {len(results) - len(sinalizacao_results)} üöó</li>
            </ul>
            
            <p><strong>üîí GARANTIA:</strong> Este relat√≥rio cont√©m APENAS placas de sinaliza√ß√£o detectadas nas imagens. Zero placas de ve√≠culos inclu√≠das.</p>
        </div>
        
        <div class="footer">
            <p>üö¶ Relat√≥rio gerado automaticamente pelo Sistema de Processamento de Sinaliza√ß√£o Brasileira</p>
            <p>üìÖ {timestamp} | üîí APENAS SINALIZA√á√ÉO DETECTADA - SEM VE√çCULOS</p>
        </div>
    </div>
</body>
</html>"""
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                print(f"‚úÖ Relat√≥rio HTML de SINALIZA√á√ÉO baseado nas imagens salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio HTML: {e}")
        
        return html_content

    def gerar_relatorio_json_sinalizacao(self, output_file: str = None) -> str:
        """Gera relat√≥rio JSON baseado APENAS nas imagens analisadas (NUNCA ve√≠culos)"""
        timestamp = datetime.now().isoformat()
        
        # Primeiro, processar as imagens para obter dados reais
        print("üîç Analisando imagens para gerar relat√≥rio JSON...")
        results = self.process_batch_sinalizacao()
        
        # Filtrar apenas resultados de sinaliza√ß√£o
        sinalizacao_results = [r for r in results if r.get('is_sinalizacao')]
        
        if not sinalizacao_results:
            return "‚ùå Nenhuma placa de sinaliza√ß√£o detectada nas imagens"
        
        relatorio_json = {
            'metadata': {
                'titulo': 'Relat√≥rio de SINALIZA√á√ÉO Detectada nas Imagens (SEM VE√çCULOS)',
                'data_geracao': timestamp,
                'total_placas_detectadas': len(sinalizacao_results),
                'total_imagens_analisadas': len(results),
                'tipo_relatorio': 'APENAS_SINALIZACAO_DETECTADA',
                'garantia': 'Zero placas de ve√≠culos inclu√≠das',
                'versao': '2.0'
            },
            'placas_sinalizacao_detectadas': []
        }
        
        # Organizar por c√≥digo - APENAS sinaliza√ß√£o detectada
        for i, result in enumerate(sinalizacao_results, 1):
            if result.get('sinalizacao_detected'):
                sinalizacao_info = result['sinalizacao_info']
                colors = list(result['detection_results']['colors'].keys())
                shapes = list(result['detection_results']['shapes'].keys())
                
                relatorio_json['placas_sinalizacao_detectadas'].append({
                    'id': i,
                    'nome': sinalizacao_info.get('nome', 'N/A'),
                    'tipo': sinalizacao_info.get('tipo', 'desconhecido'),
                    'significado': sinalizacao_info.get('significado', 'N/A'),
                    'acao': sinalizacao_info.get('acao', 'N/A'),
                    'penalidade': sinalizacao_info.get('penalidade', 'N/A'),
                    'cores': colors,
                    'formas': shapes,
                    'imagem_origem': result.get('image_path', 'N/A'),
                    'confianca': result.get('confidence', 0.0),
                    'categoria': 'sinalizacao_transito_detectada'
                })
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(relatorio_json, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ Relat√≥rio JSON de SINALIZA√á√ÉO baseado nas imagens salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio JSON: {e}")
        
        return json.dumps(relatorio_json, ensure_ascii=False, indent=2)

class VeiculoProcessor:
    """Processador independente para placas de ve√≠culos brasileiros"""
    
    def __init__(self):
        # Configura√ß√µes espec√≠ficas para placas de ve√≠culos
        self.config = {
            'min_area': 1000,  # √Årea m√≠nima para detec√ß√£o
            'color_threshold': 3.0,  # % m√≠nimo de cor para detec√ß√£o
            'text_confidence_threshold': 0.7  # Confian√ßa m√≠nima para texto
        }
        
        # Padr√µes de placas de ve√≠culos brasileiros
        self.placa_patterns = {
            'mercosul': {
                'pattern': r'^[A-Z]{3}[0-9]{1}[A-Z]{1}[0-9]{2}$',  # ABC1D23
                'description': 'Padr√£o Mercosul (2018+)',
                'example': 'ABC1D23'
            },
            'antiga': {
                'pattern': r'^[A-Z]{3}[0-9]{4}$',  # ABC1234
                'description': 'Padr√£o Antigo (1990-2018)',
                'example': 'ABC1234'
            },
            'diplomatica': {
                'pattern': r'^[A-Z]{2}[0-9]{4}$',  # CD1234
                'description': 'Placa Diplom√°tica',
                'example': 'CD1234'
            },
            'especial': {
                'pattern': r'^[A-Z]{3}[0-9]{3}$',  # ABC123
                'description': 'Placa Especial',
                'example': 'ABC123'
            }
        }
        
        # Cores espec√≠ficas de placas de ve√≠culos
        self.placa_colors = {
            'branco': {
                'lower': np.array([0, 0, 200]),
                'upper': np.array([180, 30, 255]),
                'description': 'Fundo da placa'
            },
            'preto': {
                'lower': np.array([0, 0, 0]),
                'upper': np.array([180, 255, 30]),
                'description': 'Texto da placa'
            },
            'azul': {
                'lower': np.array([100, 100, 100]),
                'upper': np.array([130, 255, 255]),
                'description': 'Bandeira Mercosul'
            }
        }
    
    def is_veiculo_plate(self, image_path: str) -> bool:
        """Verifica se a imagem √© uma placa de ve√≠culo (N√ÉO de sinaliza√ß√£o)"""
        filename = os.path.basename(image_path).lower()
        
        # Filtrar APENAS placas de sinaliza√ß√£o - N√ÉO processar
        sinalizacao_keywords = ['sinal', 'sinalizacao', 'transito', 'rua', 'avenida', 'pare', 'stop', 'proibido', 'curva', 'cruzamento']
        for keyword in sinalizacao_keywords:
            if keyword in filename:
                return False
        
        # Verificar se √© uma placa de ve√≠culo
        veiculo_keywords = ['placa', 'teste_placa', 'abc', 'def', 'ghi', 'xyz', 'carro', 'veiculo', 'automovel', 'mercosul']
        for keyword in veiculo_keywords:
            if keyword in filename:
                return True
        
        # Se n√£o tem palavras-chave espec√≠ficas, analisar o conte√∫do
        try:
            image = cv2.imread(image_path)
            if image is not None:
                # Detectar cores dominantes
                colors = self.detect_colors(image)
                shapes = self.detect_shapes(image)
                
                # Se tem cores t√≠picas de placas de ve√≠culos (branco, preto)
                placa_colors = ['branco', 'preto']
                has_placa_colors = any(color in colors for color in placa_colors)
                
                # Se tem formas retangulares t√≠picas de placas
                has_placa_shapes = 'retangular' in shapes
                
                return has_placa_colors and has_placa_shapes
        except:
            pass
        
        return False
    
    def detect_colors(self, image: np.ndarray) -> Dict[str, Dict]:
        """Detecta cores espec√≠ficas de placas de ve√≠culos"""
        # Converter para HSV
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        
        color_detections = {}
        
        for color_name, color_range in self.placa_colors.items():
            # Criar m√°scara para a cor
            mask = cv2.inRange(hsv, color_range['lower'], color_range['upper'])
            
            # Contar pixels da cor
            pixel_count = cv2.countNonZero(mask)
            total_pixels = mask.shape[0] * mask.shape[1]
            percentage = (pixel_count / total_pixels) * 100
            
            if percentage > self.config['color_threshold']:
                color_detections[color_name] = {
                    'percentage': percentage,
                    'pixel_count': pixel_count,
                    'description': color_range['description'],
                    'mask': mask
                }
        
        return color_detections
    
    def detect_shapes(self, image: np.ndarray) -> Dict[str, Dict]:
        """Detecta formas espec√≠ficas de placas de ve√≠culos"""
        # Converter para escala de cinza
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # Aplicar threshold adaptativo
        thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                     cv2.THRESH_BINARY, 11, 2)
        
        # Encontrar contornos
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        shape_detections = {}
        
        for contour in contours:
            area = cv2.contourArea(contour)
            if area > self.config['min_area']:
                # Aproximar contorno
                epsilon = 0.02 * cv2.arcLength(contour, True)
                approx = cv2.approxPolyDP(contour, epsilon, True)
                
                # Identificar forma
                vertices = len(approx)
                
                if vertices == 4:
                    # Verificar se √© ret√¢ngulo (placa t√≠pica)
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = float(w)/h
                    if 2.0 <= aspect_ratio <= 4.0:  # Propor√ß√£o t√≠pica de placas
                        shape_type = 'retangular'
                    else:
                        shape_type = 'quadrado'
                else:
                    shape_type = 'irregular'
                
                shape_detections[shape_type] = {
                    'area': area,
                    'vertices': vertices,
                    'contour': contour,
                    'approx': approx
                }
        
        return shape_detections
    
    def process_veiculo_image(self, image_path: str) -> Dict:
        """Processa uma imagem de placa de ve√≠culo"""
        # Verificar se √© realmente uma placa de ve√≠culo
        if not self.is_veiculo_plate(image_path):
            return {
                'image_path': image_path,
                'is_veiculo': False,
                'message': 'Esta imagem n√£o √© uma placa de ve√≠culo (poss√≠vel placa de sinaliza√ß√£o)'
            }
        
        # Carregar imagem
        image = cv2.imread(image_path)
        if image is None:
            return {'error': 'Imagem n√£o carregada', 'image_path': image_path}
        
        # Detectar cores
        color_detections = self.detect_colors(image)
        
        # Detectar formas
        shape_detections = self.detect_shapes(image)
        
        # Gerar resultado
        result = {
            'image_path': image_path,
            'timestamp': datetime.now().isoformat(),
            'is_veiculo': True,
            'image_info': {
                'width': image.shape[1],
                'height': image.shape[0],
                'channels': image.shape[2],
                'file_size': os.path.getsize(image_path)
            },
            'detection_results': {
                'colors': color_detections,
                'shapes': shape_detections
            },
            'veiculo_detected': True,
            'plate_type': 'veiculo_brasileiro'
        }
        
        return result
    
    def process_batch_veiculos(self, image_folder: str = '.') -> List[Dict]:
        """Processa m√∫ltiplas imagens de placas de ve√≠culos em lote (APENAS ve√≠culos)"""
        results = []
        
        # Filtrar apenas imagens
        image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff')
        image_files = [f for f in os.listdir(image_folder) 
                      if f.lower().endswith(image_extensions)]
        
        print(f"üöó PROCESSANDO APENAS PLACAS DE VE√çCULOS BRASILEIROS")
        print(f"üîç Total de imagens encontradas: {len(image_files)}")
        print("-" * 50)
        
        veiculo_count = 0
        sinalizacao_count = 0
        
        for i, image_file in enumerate(image_files, 1):
            print(f"\n[{i}/{len(image_files)}] Analisando: {image_file}")
            
            try:
                result = self.process_veiculo_image(image_file)
                results.append(result)
                
                if result.get('is_veiculo'):
                    veiculo_count += 1
                    colors = list(result['detection_results']['colors'].keys())
                    shapes = list(result['detection_results']['shapes'].keys())
                    
                    print(f"   ‚úÖ PLACA DE VE√çCULO DETECTADA!")
                    print(f"      üöó Tipo: Placa de ve√≠culo brasileira")
                    print(f"      üé® Cores: {', '.join(colors)}")
                    print(f"      üî∑ Formas: {', '.join(shapes)}")
                    print(f"      üìè Dimens√µes: {result['image_info']['width']}x{result['image_info']['height']}")
                else:
                    sinalizacao_count += 1
                    print(f"   üö¶ Placa de sinaliza√ß√£o (n√£o processada)")
                    
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
                results.append({'error': str(e), 'image': image_file})
        
        print(f"\nüéØ RESUMO DO FILTRO:")
        print(f"   ‚Ä¢ Total de imagens: {len(image_files)}")
        print(f"   ‚Ä¢ Placas de ve√≠culos: {veiculo_count} ‚úÖ")
        print(f"   ‚Ä¢ Placas de sinaliza√ß√£o: {sinalizacao_count} üö¶ (filtradas)")
        print(f"   ‚Ä¢ Erros: {len([r for r in results if 'error' in r])}")
        
        return results
    
    def gerar_relatorio_html_veiculos(self, output_file: str = None) -> str:
        """Gera relat√≥rio HTML APENAS para ve√≠culos (NUNCA sinaliza√ß√£o)"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Gerar HTML APENAS para ve√≠culos
        html_content = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöó Relat√≥rio de Placas de Ve√≠culos Brasileiros</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; text-align: center; border-bottom: 3px solid #e74c3c; padding-bottom: 10px; }}
        h2 {{ color: #34495e; border-left: 4px solid #e74c3c; padding-left: 15px; }}
        h3 {{ color: #c0392b; }}
        .stats {{ background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .padrao {{ background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; padding: 15px; margin: 10px 0; }}
        .padrao h4 {{ color: #e74c3c; margin-top: 0; }}
        .padrao ul {{ margin: 5px 0; }}
        .padrao li {{ margin: 5px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #7f8c8d; font-style: italic; }}
        .tipo-section {{ margin: 30px 0; }}
        .padrao-nome {{ font-weight: bold; color: #e74c3c; }}
        .descricao {{ font-weight: bold; color: #2c3e50; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üöó RELAT√ìRIO COMPLETO DE PLACAS DE VE√çCULOS BRASILEIROS</h1>
        
        <div class="stats">
            <h2>üìÖ Data de Gera√ß√£o: {timestamp}</h2>
            <h2>üìä Padr√µes de Placas de Ve√≠culos</h2>
            <p><strong>‚ö†Ô∏è IMPORTANTE:</strong> Este relat√≥rio cont√©m APENAS padr√µes de placas de ve√≠culos. Placas de sinaliza√ß√£o N√ÉO est√£o inclu√≠das.</p>
        </div>
        
        <div class="tipo-section">
            <h2>üöó PADR√ïES DE PLACAS DE VE√çCULOS BRASILEIROS</h2>
"""
        
        for padrao_nome, padrao_info in self.placa_patterns.items():
            html_content += f"""
            <div class="padrao">
                <h4><span class="padrao-nome">{padrao_nome.upper()}</span></h4>
                <ul>
                    <li><strong>Padr√£o:</strong> <code>{padrao_info['pattern']}</code></li>
                    <li><strong>Descri√ß√£o:</strong> {padrao_info['description']}</li>
                    <li><strong>Exemplo:</strong> <strong>{padrao_info['example']}</strong></li>
                </ul>
            </div>
"""
        
        html_content += f"""
        </div>
        
        <div class="stats">
            <h2>üìä RESUMO ESTAT√çSTICO - APENAS VE√çCULOS</h2>
            
            <h3>Padr√µes Dispon√≠veis:</h3>
            <ul>
                <li><strong>Mercosul:</strong> Padr√£o atual (2018+)</li>
                <li><strong>Antiga:</strong> Padr√£o anterior (1990-2018)</li>
                <li><strong>Diplom√°tica:</strong> Placas especiais</li>
                <li><strong>Especial:</strong> Outros tipos especiais</li>
            </ul>
            
            <p><strong>üîí GARANTIA:</strong> Este relat√≥rio cont√©m APENAS padr√µes de placas de ve√≠culos. Zero placas de sinaliza√ß√£o inclu√≠das.</p>
        </div>
        
        <div class="footer">
            <p>üöó Relat√≥rio gerado automaticamente pelo Sistema de Processamento de Placas de Ve√≠culos</p>
            <p>üìÖ {timestamp} | üîí APENAS VE√çCULOS - SEM SINALIZA√á√ÉO</p>
        </div>
    </div>
</body>
</html>"""
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(html_content)
                print(f"‚úÖ Relat√≥rio HTML de VE√çCULOS salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio HTML: {e}")
        
        return html_content
    
    def gerar_relatorio_json_veiculos(self, output_file: str = None) -> str:
        """Gera relat√≥rio JSON APENAS para ve√≠culos (NUNCA sinaliza√ß√£o)"""
        timestamp = datetime.now().isoformat()
        
        relatorio_json = {
            'metadata': {
                'titulo': 'Relat√≥rio de PLACAS DE VE√çCULOS Brasileiros (SEM SINALIZA√á√ÉO)',
                'data_geracao': timestamp,
                'total_padroes': len(self.placa_patterns),
                'tipo_relatorio': 'APENAS_VEICULOS',
                'garantia': 'Zero placas de sinaliza√ß√£o inclu√≠das',
                'versao': '2.0'
            },
            'padroes_placas': {}
        }
        
        # Organizar por padr√£o - APENAS ve√≠culos
        for padrao_nome, padrao_info in self.placa_patterns.items():
            relatorio_json['padroes_placas'][padrao_nome] = {
                'padrao_regex': padrao_info['pattern'],
                'descricao': padrao_info['description'],
                'exemplo': padrao_info['example'],
                'categoria': 'placa_veiculo_brasileiro'
            }
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(relatorio_json, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ Relat√≥rio JSON de VE√çCULOS salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio JSON: {e}")
        
        return json.dumps(relatorio_json, ensure_ascii=False, indent=2)

def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    print("üö¶üöó SISTEMA DUAL DE PROCESSAMENTO: SINALIZA√á√ÉO + VE√çCULOS")
    print("=" * 70)
    print("üìã Este arquivo possui DUAS funcionalidades COMPLETAMENTE SEPARADAS!")
    print("üéØ SEPARA√á√ÉO TOTAL: Zero mistura entre os dois tipos!")
    print("=" * 70)
    
    sinalizacao_processor = SinalizacaoProcessor()
    veiculo_processor = VeiculoProcessor()
    
    while True:
        print("\nüìã MENU PRINCIPAL - SISTEMA DUAL")
        print("=" * 50)
        print("üö¶ PROCESSAMENTO DE SINALIZA√á√ÉO:")
        print("1. üîç Processar APENAS placas de sinaliza√ß√£o")
        print("2. üìÑ Gerar relat√≥rio HTML de SINALIZA√á√ÉO")
        print("3. üìÑ Gerar relat√≥rio JSON de SINALIZA√á√ÉO")
        print("4. üìñ Ver significados das placas de sinaliza√ß√£o")
        print("-" * 30)
        print("üöó PROCESSAMENTO DE VE√çCULOS:")
        print("5. üîç Processar APENAS placas de ve√≠culos")
        print("6. üìÑ Gerar relat√≥rio HTML de VE√çCULOS")
        print("7. üìÑ Gerar relat√≥rio JSON de VE√çCULOS")
        print("8. üìä Ver padr√µes de placas de ve√≠culos")
        print("-" * 30)
        print("üß™ FERRAMENTAS DE TESTE:")
        print("9. üö¶ Criar imagens de teste de sinaliza√ß√£o")
        print("10. üß™ Teste r√°pido de sinaliza√ß√£o")
        print("0. ‚ùå Sair")
        print("-" * 30)
        
        try:
            choice = input("Escolha uma op√ß√£o: ").strip()
            
            if choice == '1':
                print("\nüîç PROCESSAMENTO EM LOTE - APENAS SINALIZA√á√ÉO")
                print("-" * 50)
                print("üö¶ PROCESSANDO APENAS PLACAS DE SINALIZA√á√ÉO (SEM VE√çCULOS)")
                
                results = sinalizacao_processor.process_batch_sinalizacao()
                
                # Resumo final
                summary = sinalizacao_processor.generate_summary(results)
                
                print(f"\nüéØ RESUMO FINAL - APENAS SINALIZA√á√ÉO")
                print(f"   ‚Ä¢ Total de imagens: {summary['total_images']}")
                print(f"   ‚Ä¢ Placas de sinaliza√ß√£o: {summary['sinalizacao_images']} ‚úÖ")
                print(f"   ‚Ä¢ Placas de ve√≠culos: {summary['vehicle_images']} üöó (FILTRADAS)")
                print(f"   ‚Ä¢ Detec√ß√µes bem-sucedidas: {summary['successful_detections']}")
                print(f"   ‚Ä¢ Erros: {summary['errors']}")
                print(f"   ‚Ä¢ Confian√ßa m√©dia: {summary['confidence_stats']['avg']:.2f}")
                
            elif choice == '2':
                print("\nüìÑ GERANDO RELAT√ìRIO HTML - APENAS SINALIZA√á√ÉO")
                print("-" * 50)
                print("üö¶ GERANDO HTML APENAS PARA SINALIZA√á√ÉO (SEM VE√çCULOS)")
                
                output_html = "relatorio_sinalizacao.html"
                html_content = sinalizacao_processor.gerar_relatorio_html_sinalizacao(output_html)
                print(f"‚úÖ Relat√≥rio HTML de SINALIZA√á√ÉO salvo em: {output_html}")
                print(f"üîí GARANTIA: Zero placas de ve√≠culos inclu√≠das!")
                
            elif choice == '3':
                print("\nüìÑ GERANDO RELAT√ìRIO JSON - APENAS SINALIZA√á√ÉO")
                print("-" * 50)
                print("üö¶ GERANDO JSON APENAS PARA SINALIZA√á√ÉO (SEM VE√çCULOS)")
                
                output_json = "relatorio_sinalizacao.json"
                json_content = sinalizacao_processor.gerar_relatorio_json_sinalizacao(output_json)
                print(f"‚úÖ Relat√≥rio JSON de SINALIZA√á√ÉO salvo em: {output_json}")
                print(f"üîí GARANTIA: Zero placas de ve√≠culos inclu√≠das!")
                
            elif choice == '4':
                print("\nüìñ SIGNIFICADOS DAS PLACAS DE SINALIZA√á√ÉO")
                print("-" * 50)
                print("üö¶ MOSTRANDO APENAS PLACAS DE SINALIZA√á√ÉO (SEM VE√çCULOS)")
                
                if BASE_DADOS_AVAILABLE:
                    # Mostrar algumas placas da base de dados
                    print("üìä Mostrando algumas placas da base de dados oficial:")
                    count = 0
                    for codigo, info in list(sinalizacao_processor.codigos_oficiais.items())[:10]:
                        print(f"\nüö¶ {codigo} - {info.get('nome', 'N/A')}")
                        print(f"   üìñ Significado: {info.get('significado', 'N/A')}")
                        print(f"   ‚ö†Ô∏è  A√ß√£o: {info.get('acao', 'N/A')}")
                        print(f"   üí∞ Penalidade: {info.get('penalidade', 'N/A')}")
                        print(f"   üé® Cores: {', '.join(info.get('cores', []))}")
                        print(f"   üî∑ Formas: {', '.join(info.get('formas', []))}")
                        print(f"   üè∑Ô∏è  Tipo: {info.get('tipo', 'N/A')}")
                        print("-" * 30)
                        count += 1
                        if count >= 10:
                            print(f"\n... e mais {len(sinalizacao_processor.codigos_oficiais) - 10} placas na base de dados")
                            break
                else:
                    # Mostrar dados b√°sicos
                    for key, info in sinalizacao_processor.sinalizacao_significados.items():
                        print(f"\nüö¶ {info['nome']}")
                        print(f"   üìñ Significado: {info['significado']}")
                        print(f"   ‚ö†Ô∏è  A√ß√£o: {info['acao']}")
                        print(f"   üí∞ Penalidade: {info['penalidade']}")
                        print(f"   üé® Cores: {', '.join(info['cores'])}")
                        print(f"   üî∑ Formas: {', '.join(info['formas'])}")
                        print(f"   üè∑Ô∏è  Tipo: {info['tipo']}")
                        print("-" * 30)
                
            elif choice == '5':
                print("\nüîç PROCESSAMENTO EM LOTE - APENAS VE√çCULOS")
                print("-" * 50)
                print("üöó PROCESSANDO APENAS PLACAS DE VE√çCULOS (SEM SINALIZA√á√ÉO)")
                
                results = veiculo_processor.process_batch_veiculos()
                
                print(f"\nüéØ RESUMO FINAL - APENAS VE√çCULOS")
                print(f"   ‚Ä¢ Total de imagens processadas")
                print(f"   ‚Ä¢ Placas de ve√≠culos detectadas ‚úÖ")
                print(f"   ‚Ä¢ Placas de sinaliza√ß√£o: FILTRADAS üö¶")
                print(f"üîí GARANTIA: Zero placas de sinaliza√ß√£o inclu√≠das!")
                
            elif choice == '6':
                print("\nüìÑ GERANDO RELAT√ìRIO HTML - APENAS VE√çCULOS")
                print("-" * 50)
                print("üöó GERANDO HTML APENAS PARA VE√çCULOS (SEM SINALIZA√á√ÉO)")
                
                output_html = "relatorio_veiculos.html"
                html_content = veiculo_processor.gerar_relatorio_html_veiculos(output_html)
                print(f"‚úÖ Relat√≥rio HTML de VE√çCULOS salvo em: {output_html}")
                print(f"üîí GARANTIA: Zero placas de sinaliza√ß√£o inclu√≠das!")
                
            elif choice == '7':
                print("\nüìÑ GERANDO RELAT√ìRIO JSON - APENAS VE√çCULOS")
                print("-" * 50)
                print("üöó GERANDO JSON APENAS PARA VE√çCULOS (SEM SINALIZA√á√ÉO)")
                
                output_json = "relatorio_veiculos.json"
                json_content = veiculo_processor.gerar_relatorio_json_veiculos(output_json)
                print(f"‚úÖ Relat√≥rio JSON de VE√çCULOS salvo em: {output_json}")
                print(f"üîí GARANTIA: Zero placas de sinaliza√ß√£o inclu√≠das!")
                
            elif choice == '8':
                print("\nüìä PADR√ïES DE PLACAS DE VE√çCULOS BRASILEIROS")
                print("-" * 50)
                print("üöó MOSTRANDO APENAS PADR√ïES DE VE√çCULOS (SEM SINALIZA√á√ÉO)")
                
                for padrao_nome, padrao_info in veiculo_processor.placa_patterns.items():
                    print(f"\nüöó {padrao_nome.upper()}")
                    print(f"   üìã Padr√£o: {padrao_info['pattern']}")
                    print(f"   üìñ Descri√ß√£o: {padrao_info['description']}")
                    print(f"   üí° Exemplo: {padrao_info['example']}")
                    print("-" * 30)
                
            elif choice == '9':
                print("\nüö¶ CRIANDO IMAGENS DE TESTE DE SINALIZA√á√ÉO")
                print("-" * 40)
                
                test_plates = [
                    ("pare", "PARE"),
                    ("proibido", "PROIBIDO"),
                    ("velocidade", "40 KM/H"),
                    ("advertencia", "CURVA"),
                    ("rua", "RUA DAS FLORES")
                ]
                
                for tipo, texto in test_plates:
                    filename = sinalizacao_processor.create_test_sinalizacao(tipo, texto)
                    print(f"   ‚úÖ Criada: {filename}")
                
                print(f"\nüéØ Total criado: {len(test_plates)} imagens de sinaliza√ß√£o")
                
            elif choice == '10':
                print("\nüß™ TESTE R√ÅPIDO DE SINALIZA√á√ÉO")
                print("-" * 30)
                
                # Criar e processar uma imagem
                test_img = sinalizacao_processor.create_test_sinalizacao("pare", "PARE")
                print(f"‚úÖ Imagem criada: {test_img}")
                
                result = sinalizacao_processor.process_sinalizacao_image(test_img)
                if result.get('sinalizacao_detected'):
                    sinalizacao_info = result['sinalizacao_info']
                    colors = list(result['detection_results']['colors'].keys())
                    shapes = list(result['detection_results']['shapes'].keys())
                    
                    print(f"‚úÖ Processamento conclu√≠do!")
                    print(f"   üö¶ Nome: {sinalizacao_info['nome']}")
                    print(f"   üìñ Significado: {sinalizacao_info['significado']}")
                    print(f"   ‚ö†Ô∏è  A√ß√£o: {sinalizacao_info['acao']}")
                    print(f"   üí∞ Penalidade: {sinalizacao_info['penalidade']}")
                    print(f"   üé® Cores: {', '.join(colors)}")
                    print(f"   üî∑ Formas: {', '.join(shapes)}")
                    print(f"   üéØ Confian√ßa: {result['confidence']:.2f}")
                
            elif choice == '0':
                print("\nüëã Obrigado por usar o Sistema Dual de Processamento!")
                print("   üö¶ Sinaliza√ß√£o + üöó Ve√≠culos - At√© logo!")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha de 0 a 10.")
            
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  Aplica√ß√£o interrompida")
            break
        except Exception as e:
            print(f"\n‚ùå Erro: {e}")
        
        input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    main()
