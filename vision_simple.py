#!/usr/bin/env python3
"""
Sistema Simplificado de Vis√£o Computacional para Placas de Sinaliza√ß√£o
====================================================================

Vers√£o otimizada que funciona com as bibliotecas dispon√≠veis
"""

import cv2
import numpy as np
import os
import json
from datetime import datetime
from typing import Dict, List, Tuple, Optional
from pathlib import Path

class SimpleVisionProcessor:
    """Processador simplificado de vis√£o computacional para placas de sinaliza√ß√£o"""
    
    def __init__(self):
        print("üöÄ Inicializando Sistema Simplificado de Vis√£o Computacional...")
        
        # Configura√ß√µes
        self.config = {
            'min_area': 5000,  # √Årea m√≠nima para detec√ß√£o
            'confidence_threshold': 0.3,
            'image_size': 640
        }
        
        # Base de dados de refer√™ncia
        self.reference_database = self._load_reference_database()
        
        print("‚úÖ Sistema inicializado com sucesso!")
    
    def _load_reference_database(self) -> Dict:
        """Carrega base de dados de refer√™ncia para placas"""
        return {
            'PARE': {
                'codigo': 'R-1',
                'tipo': 'obrigatorio',
                'significado': 'Parada obrigat√≥ria',
                'acao': 'Parar completamente',
                'penalidade': 'Multa e pontos na carteira',
                'caracteristicas': ['octogonal', 'vermelho', 'branco']
            },
            'STOP': {
                'codigo': 'R-1',
                'tipo': 'obrigatorio',
                'significado': 'Parada obrigat√≥ria',
                'acao': 'Parar completamente',
                'penalidade': 'Multa e pontos na carteira',
                'caracteristicas': ['octogonal', 'vermelho', 'branco']
            },
            'PROIBIDO': {
                'codigo': 'R-6',
                'tipo': 'obrigatorio',
                'significado': 'Proibi√ß√£o espec√≠fica',
                'acao': 'Seguir a proibi√ß√£o indicada',
                'penalidade': 'Multa e pontos na carteira',
                'caracteristicas': ['circular', 'vermelho', 'branco']
            },
            'VELOCIDADE': {
                'codigo': 'R-19',
                'tipo': 'regulamentacao',
                'significado': 'Limite de velocidade',
                'acao': 'Respeitar o limite indicado',
                'penalidade': 'Multa e pontos na carteira',
                'caracteristicas': ['circular', 'azul', 'branco']
            },
            'CURVA': {
                'codigo': 'A-1',
                'tipo': 'advertencia',
                'significado': 'Curva perigosa √† frente',
                'acao': 'Reduzir velocidade e ter cuidado',
                'penalidade': 'N√£o aplic√°vel (advert√™ncia)',
                'caracteristicas': ['triangular', 'amarelo', 'preto']
            }
        }
    
    def preprocess_image(self, image: np.ndarray) -> np.ndarray:
        """Pr√©-processa imagem para melhor an√°lise"""
        try:
            # Redimensionar para tamanho padr√£o
            image = cv2.resize(image, (self.config['image_size'], self.config['image_size']))
            
            # Converter para RGB
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # Aplicar filtros para redu√ß√£o de ru√≠do
            image = cv2.GaussianBlur(image, (3, 3), 0)
            
            # Aumentar contraste
            lab = cv2.cvtColor(image, cv2.COLOR_RGB2LAB)
            l, a, b = cv2.split(lab)
            
            # Aplicar CLAHE no canal L
            clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
            l = clahe.apply(l)
            
            # Reconstruir LAB
            lab = cv2.merge([l, a, b])
            image = cv2.cvtColor(lab, cv2.COLOR_LAB2RGB)
            
            return image
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no pr√©-processamento: {e}")
            # Retornar imagem original se houver erro
            return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    def detect_plates(self, image: np.ndarray) -> List[Dict]:
        """Detecta placas na imagem usando an√°lise de contornos"""
        try:
            # Converter para escala de cinza
            gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            
            # Aplicar threshold adaptativo
            thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                         cv2.THRESH_BINARY, 11, 2)
            
            # Detectar contornos
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            plates = []
            for contour in contours:
                area = cv2.contourArea(contour)
                if area > self.config['min_area']:
                    # Aproximar contorno
                    epsilon = 0.02 * cv2.arcLength(contour, True)
                    approx = cv2.approxPolyDP(contour, epsilon, True)
                    
                    # Verificar se √© uma forma v√°lida
                    if len(approx) >= 3:
                        x, y, w, h = cv2.boundingRect(contour)
                        
                        # Extrair ROI da placa
                        roi = image[y:y+h, x:x+w]
                        
                        plates.append({
                            'bbox': [x, y, x+w, y+h],
                            'confidence': 0.7,  # Confian√ßa padr√£o
                            'contour': contour,
                            'approx': approx,
                            'roi': roi,
                            'area': area
                        })
            
            return plates
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na detec√ß√£o: {e}")
            return []
    
    def analyze_colors(self, roi: np.ndarray) -> Dict:
        """Analisa cores dominantes na placa"""
        try:
            # Converter para HSV
            hsv = cv2.cvtColor(roi, cv2.COLOR_RGB2HSV)
            
            # Definir ranges de cores
            color_ranges = {
                'vermelho': [([0, 100, 100], [10, 255, 255])],
                'azul': [([100, 100, 100], [130, 255, 255])],
                'amarelo': [([20, 100, 100], [30, 255, 255])],
                'verde': [([40, 100, 100], [80, 255, 255])],
                'branco': [([0, 0, 200], [180, 30, 255])],
                'preto': [([0, 0, 0], [180, 255, 30])]
            }
            
            color_analysis = {}
            total_pixels = roi.shape[0] * roi.shape[1]
            
            for color_name, ranges in color_ranges.items():
                color_pixels = 0
                
                for lower, upper in ranges:
                    mask = cv2.inRange(hsv, np.array(lower), np.array(upper))
                    color_pixels += cv2.countNonZero(mask)
                
                percentage = (color_pixels / total_pixels) * 100
                if percentage > 5:  # M√≠nimo 5% da imagem
                    color_analysis[color_name] = percentage
            
            return color_analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de cores: {e}")
            return {}
    
    def analyze_shapes(self, roi: np.ndarray, approx: np.ndarray) -> Dict:
        """Analisa formas geom√©tricas na placa"""
        try:
            vertices = len(approx)
            
            shape_analysis = {}
            
            if vertices == 3:
                shape_analysis['triangular'] = 1
            elif vertices == 4:
                # Verificar se √© quadrado ou ret√¢ngulo
                x, y, w, h = cv2.boundingRect(approx)
                aspect_ratio = w / h
                if 0.8 <= aspect_ratio <= 1.2:
                    shape_analysis['quadrado'] = 1
                else:
                    shape_analysis['retangular'] = 1
            elif vertices == 8:
                shape_analysis['octogonal'] = 1
            elif vertices > 8:
                # Verificar circularidade
                area = cv2.contourArea(approx)
                perimeter = cv2.arcLength(approx, True)
                if perimeter > 0:
                    circularity = 4 * np.pi * area / (perimeter * perimeter)
                    if circularity > 0.8:
                        shape_analysis['circular'] = 1
                    else:
                        shape_analysis['irregular'] = 1
            else:
                shape_analysis['irregular'] = 1
            
            return shape_analysis
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise de formas: {e}")
            return {}
    
    def classify_plate_type(self, colors: Dict, shapes: Dict) -> Dict:
        """Classifica o tipo de placa baseado em caracter√≠sticas visuais"""
        # Sistema de pontua√ß√£o
        score = 0
        classification = {
            'tipo': 'desconhecido',
            'codigo': 'N/A',
            'nome': 'PLACA N√ÉO IDENTIFICADA',
            'significado': 'N√£o foi poss√≠vel identificar esta placa',
            'acao': 'Observar e seguir orienta√ß√µes',
            'penalidade': 'Verificar tipo espec√≠fico',
            'confidence': 0.0,
            'caracteristicas': {
                'cores': list(colors.keys()),
                'formas': list(shapes.keys())
            }
        }
        
        # An√°lise baseada em cores e formas
        if 'vermelho' in colors and 'octogonal' in shapes:
            score += 80
            classification['tipo'] = 'obrigatorio'
            classification['codigo'] = 'R-1'
            classification['nome'] = 'PARE'
            classification['significado'] = 'Parada obrigat√≥ria'
            classification['acao'] = 'Parar completamente'
            classification['penalidade'] = 'Multa e pontos na carteira'
        
        elif 'vermelho' in colors and 'circular' in shapes:
            score += 70
            classification['tipo'] = 'obrigatorio'
            classification['codigo'] = 'R-6'
            classification['nome'] = 'PROIBI√á√ÉO'
            classification['significado'] = 'Proibi√ß√£o espec√≠fica'
            classification['acao'] = 'Seguir a proibi√ß√£o indicada'
            classification['penalidade'] = 'Multa e pontos na carteira'
        
        elif 'azul' in colors and 'circular' in shapes:
            score += 65
            classification['tipo'] = 'regulamentacao'
            classification['codigo'] = 'R-19'
            classification['nome'] = 'REGULAMENTA√á√ÉO'
            classification['significado'] = 'Regulamenta√ß√£o espec√≠fica'
            classification['acao'] = 'Seguir a regulamenta√ß√£o indicada'
            classification['penalidade'] = 'Multa e pontos na carteira'
        
        elif 'amarelo' in colors and 'triangular' in shapes:
            score += 75
            classification['tipo'] = 'advertencia'
            classification['codigo'] = 'A-1'
            classification['nome'] = 'ADVERT√äNCIA'
            classification['significado'] = 'Advert√™ncia de perigo √† frente'
            classification['acao'] = 'Reduzir velocidade e ter aten√ß√£o'
            classification['penalidade'] = 'N√£o aplic√°vel (advert√™ncia)'
        
        # Normalizar score para 0-1
        classification['confidence'] = min(score / 100, 1.0)
        
        return classification
    
    def process_image(self, image_path: str) -> Dict:
        """Processa uma imagem completa usando vis√£o computacional"""
        print(f"üîç Processando: {image_path}")
        
        try:
            # Carregar imagem
            image = cv2.imread(image_path)
            if image is None:
                return {'error': 'Imagem n√£o carregada', 'image_path': image_path}
            
            # Pr√©-processar
            processed_image = self.preprocess_image(image)
            
            # Detectar placas
            plates = self.detect_plates(processed_image)
            
            if not plates:
                return {
                    'image_path': image_path,
                    'plates_detected': 0,
                    'message': 'Nenhuma placa detectada'
                }
            
            # Processar cada placa detectada
            results = []
            for i, plate in enumerate(plates):
                print(f"   üìã Analisando placa {i+1}/{len(plates)}")
                
                # Analisar cores
                colors = self.analyze_colors(plate['roi'])
                
                # Analisar formas
                shapes = self.analyze_shapes(plate['roi'], plate['approx'])
                
                # Classificar tipo
                classification = self.classify_plate_type(colors, shapes)
                
                # Combinar resultados
                plate_result = {
                    'plate_id': i + 1,
                    'bbox': plate['bbox'],
                    'detection_confidence': plate['confidence'],
                    'classification': classification,
                    'roi_size': plate['roi'].shape[:2],
                    'area': plate['area']
                }
                
                results.append(plate_result)
            
            return {
                'image_path': image_path,
                'timestamp': datetime.now().isoformat(),
                'plates_detected': len(plates),
                'results': results,
                'image_info': {
                    'width': image.shape[1],
                    'height': image.shape[0],
                    'channels': image.shape[2]
                }
            }
            
        except Exception as e:
            return {
                'error': f'Erro ao processar {image_path}: {str(e)}',
                'image_path': image_path
            }
    
    def process_folder(self, folder_path: str) -> List[Dict]:
        """Processa todas as imagens em uma pasta"""
        folder = Path(folder_path)
        if not folder.exists():
            return [{'error': f'Pasta n√£o encontrada: {folder_path}'}]
        
        # Encontrar imagens
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
        image_files = []
        for ext in image_extensions:
            image_files.extend(folder.glob(f'*{ext}'))
            image_files.extend(folder.glob(f'*{ext.upper()}'))
        
        if not image_files:
            return [{'error': f'Nenhuma imagem encontrada em: {folder_path}'}]
        
        print(f"üìÅ Processando {len(image_files)} imagens em: {folder_path}")
        
        results = []
        for image_file in image_files:
            result = self.process_image(str(image_file))
            results.append(result)
        
        return results
    
    def generate_report(self, results: List[Dict], output_file: str = None) -> str:
        """Gera relat√≥rio detalhado dos resultados"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Estat√≠sticas
        total_images = len(results)
        successful_images = len([r for r in results if 'error' not in r])
        total_plates = sum([r.get('plates_detected', 0) for r in results if 'error' not in r])
        
        # An√°lise de confian√ßa
        confidences = []
        for result in results:
            if 'error' not in result and 'results' in result:
                for plate in result['results']:
                    conf = plate['classification']['confidence']
                    confidences.append(conf)
        
        avg_confidence = np.mean(confidences) if confidences else 0
        
        # Relat√≥rio
        report = f"""# üö¶ RELAT√ìRIO DE VIS√ÉO COMPUTACIONAL - PLACAS DE SINALIZA√á√ÉO

## üìÖ Data de Gera√ß√£o: {timestamp}
## üìä Estat√≠sticas Gerais
- **Total de imagens**: {total_images}
- **Imagens processadas com sucesso**: {successful_images}
- **Total de placas detectadas**: {total_plates}
- **Confian√ßa m√©dia**: {avg_confidence:.2f}

## üîç DETALHES POR IMAGEM

"""
        
        for result in results:
            if 'error' in result:
                report += f"""
### ‚ùå {result.get('image_path', 'Imagem desconhecida')}
**Erro**: {result['error']}

"""
            else:
                report += f"""
### ‚úÖ {result.get('image_path', 'Imagem desconhecida')}
**Placas detectadas**: {result.get('plates_detected', 0)}

"""
                
                for plate in result.get('results', []):
                    classification = plate['classification']
                    report += f"""
#### üìã Placa {plate['plate_id']}
- **Nome**: {classification['nome']}
- **C√≥digo**: {classification['codigo']}
- **Tipo**: {classification['tipo']}
- **Significado**: {classification['significado']}
- **A√ß√£o**: {classification['acao']}
- **Penalidade**: {classification['penalidade']}
- **Confian√ßa**: {classification['confidence']:.2f}
- **Caracter√≠sticas**:
  - Cores: {', '.join(classification['caracteristicas']['cores'])}
  - Formas: {', '.join(classification['caracteristicas']['formas'])}
- **√Årea**: {plate.get('area', 0):.0f} pixels

"""
        
        # Salvar arquivo se especificado
        if output_file:
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write(report)
                print(f"‚úÖ Relat√≥rio salvo em: {output_file}")
            except Exception as e:
                print(f"‚ùå Erro ao salvar relat√≥rio: {e}")
        
        return report

def main():
    """Fun√ß√£o principal para demonstra√ß√£o"""
    print("üöÄ SISTEMA SIMPLIFICADO DE VIS√ÉO COMPUTACIONAL PARA PLACAS DE SINALIZA√á√ÉO")
    print("=" * 70)
    
    # Inicializar processador
    processor = SimpleVisionProcessor()
    
    # Processar pasta de sinaliza√ß√£o
    sinalizacao_folder = "sinalizacao"
    
    if os.path.exists(sinalizacao_folder):
        print(f"\nüìÅ Processando pasta: {sinalizacao_folder}")
        results = processor.process_folder(sinalizacao_folder)
        
        # Gerar relat√≥rio
        report_file = "relatorio_visao_simples.md"
        report = processor.generate_report(results, report_file)
        
        print(f"\nüìä RELAT√ìRIO GERADO:")
        print(f"   ‚Ä¢ Total de imagens: {len(results)}")
        print(f"   ‚Ä¢ Placas detectadas: {sum([r.get('plates_detected', 0) for r in results if 'error' not in r])}")
        print(f"   ‚Ä¢ Relat√≥rio salvo em: {report_file}")
        
    else:
        print(f"\n‚ùå Pasta n√£o encontrada: {sinalizacao_folder}")
        print("üí° Certifique-se de que a pasta existe e cont√©m imagens")

if __name__ == "__main__":
    main()
