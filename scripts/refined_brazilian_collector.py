#!/usr/bin/env python3
"""
Coletor Refinado de Dados Brasileiros
=====================================

Sistema aprimorado para coleta espec√≠fica de:
- Placas de Ve√≠culos Brasileiros (Mercosul, padr√£o antigo)
- Placas de Sinaliza√ß√£o de Tr√¢nsito Brasileiras (CONTRAN)

Melhorias implementadas:
- Queries mais espec√≠ficas e contextualiza                print(f"üìà Total coletado: {valid_images} imagens")as
- Filtros de qualidade de imagem
- Valida√ß√£o autom√°tica de conte√∫do
- Classifica√ß√£o autom√°tica por tipo
- Remo√ß√£o de imagens irrelevantes
"""

import os
import sys
import json
import requests
import time
import cv2
import numpy as np
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
import logging
from urllib.parse import urlparse
import hashlib
from PIL import Image, ImageFilter
import re

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RefinedBrazilianCollector:
    """Coletor refinado para dados brasileiros espec√≠ficos."""
    
    def __init__(self, output_dir: str = "datasets/refined_brazilian"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Diret√≥rios organizados
        self.signal_dir = self.output_dir / "signal_plates"
        self.vehicle_dir = self.output_dir / "vehicle_plates" 
        self.rejected_dir = self.output_dir / "rejected"
        
        # Criar diret√≥rios
        for dir_path in [self.signal_dir, self.vehicle_dir, self.rejected_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # Configura√ß√µes para filtros ultra-restritivos
        self.config = {
            "min_image_size": (200, 100),
            "max_image_size": (4000, 3000),
            "min_file_size": 5000,
            "quality_threshold": 80,
            "delay_between_requests": 3,
            "max_images_per_query": 5
        }
        
        # Setup das queries e valida√ß√µes
        self._setup_queries()
        self._setup_validation_patterns()
        self._setup_irrelevant_keywords()
    
    def _setup_queries(self):
        """Define queries espec√≠ficas para cada tipo de placa."""
        
        # Placas de Sinaliza√ß√£o - ULTRA ESPEC√çFICAS
        self.signal_queries = {
            # PARE (R-1) - ESPEC√çFICAS
            "stop_signs": [
                "placa PARE R-1 brasil oct√≥gono vermelho contran",
                "sinaliza√ß√£o PARE brasil oficial detran",
                "placa stop brasil vermelha oitavada contran"
            ],
            # D√™ prefer√™ncia (R-2) - ESPEC√çFICAS
            "yield_signs": [
                "placa D√ä PREFER√äNCIA R-2 brasil tri√¢ngulo invertido",
                "sinaliza√ß√£o prefer√™ncia brasil amarelo contran",
                "placa yield brasil triangular oficial"
            ],
            # Proibi√ß√µes (R-3 a R-15) - ESPEC√çFICAS
            "prohibition_signs": [
                "placa PROIBIDO VIRAR √Ä ESQUERDA R-5 brasil contran",
                "placa PROIBIDO ESTACIONAR R-6a brasil contran",
                "estacionamento regulamentado brasil zona azul oficial"
            ],
            # Advert√™ncia (A-1 a A-44) - ESPEC√çFICAS
            "warning_signs": [
                "placa CURVA PERIGOSA A-2 brasil losango amarelo",
                "placa CRUZAMENTO A-10 brasil advert√™ncia contran",
                "sinaliza√ß√£o OBRAS NA PISTA A-21 brasil amarelo"
            ],
            # Indica√ß√£o - GOVERNAMENTAIS
            "information_signs": [
                "placa sentido circula√ß√£o brasil azul retangular",
                "placa M√ÉO √öNICA brasil informa√ß√£o contran",
                "sinaliza√ß√£o dire√ß√£o centro brasil azul"
            ]
        }
        
        # Placas de Ve√≠culos - ULTRA ESPEC√çFICAS
        self.vehicle_queries = {
            "mercosul_plates": [
                "placa mercosul ve√≠culo brasil AAA1B23 detran oficial",
                "placa automotor mercosul padr√£o brasileiro contran",
                "placa carro mercosul brasil branca azul oficial"
            ],
            "old_pattern_plates": [
                "placa padr√£o antigo brasil AAA-0000 cinza detran",
                "placa ve√≠culo antiga brasileira tr√™s letras quatro n√∫meros",
                "placa automotor padr√£o antigo brasil oficial"
            ],
            "special_plates": [
                "placa diplom√°tica brasil vermelha CD oficial",
                "placa oficial governo brasil azul estado",
                "placa pol√≠cia militar brasil oficial PM"
            ],
            "motorcycle_plates": [
                "placa motocicleta mercosul brasil branca azul detran",
                "placa moto brasileira padr√£o mercosul oficial",
                "placa motocicleta brasil AAA1B23 contran"
            ]
        }
    
    def _setup_validation_patterns(self):
        """Define padr√µes para validar se as imagens s√£o relevantes."""
        
        # Padr√µes de placas brasileiras
        self.plate_patterns = {
            "mercosul": re.compile(r"[A-Z]{3}[0-9][A-Z][0-9]{2}"),
            "old_pattern": re.compile(r"[A-Z]{3}-?[0-9]{4}"),
            "motorcycle": re.compile(r"[A-Z]{3}[0-9]{4}")
        }
        
        # Palavras-chave que indicam conte√∫do brasileiro
        self.brazilian_keywords = [
            "brasil", "brazil", "brazilian", "contran", "detran", 
            "denatran", "c√≥digo", "tr√¢nsito", "sinaliza√ß√£o", "oficial",
            "resolu√ß√£o", "mercosul", "brasileiro", "brasileira"
        ]
    
    def _setup_irrelevant_keywords(self):
        """Define palavras-chave que indicam conte√∫do irrelevante."""
        
        self.irrelevant_keywords = [
            # Sites de stock e m√≠dia
            "shutterstock", "getty", "alamy", "dreamstime", "fotolia", "istockphoto",
            # Redes sociais
            "pinterest", "facebook", "instagram", "twitter", "linkedin",
            # Pa√≠ses estrangeiros
            "usa", "america", "europe", "canada", "mexico", "argentina",
            # Conte√∫do artificial
            "clipart", "vector", "drawing", "illustration", "cartoon", "fake",
            # Aplicativos
            "app", "interface", "website", "software", "screenshot"
        ]
    
    def _get_output_dir(self, category: str) -> Path:
        """Retorna o diret√≥rio correto baseado na categoria."""
        if category == "signal_plates":
            return self.signal_dir
        elif category == "vehicle_plates":
            return self.vehicle_dir
        else:
            return self.rejected_dir
    
    def validate_image_relevance(self, image_path: Path, category: str) -> bool:
        """
        Valida se uma imagem √© relevante usando valida√ß√£o b√°sica.
        Para valida√ß√£o avan√ßada, use BrazilianPlateValidator.
        """
        try:
            # Verificar se arquivo existe e n√£o est√° corrompido
            if not image_path.exists() or image_path.stat().st_size < self.config["min_file_size"]:
                return False
            
            # Verificar dimens√µes da imagem
            try:
                with Image.open(image_path) as img:
                    width, height = img.size
                    
                    if width < self.config["min_image_size"][0] or height < self.config["min_image_size"][1]:
                        return False
                        
                    if width > self.config["max_image_size"][0] or height > self.config["max_image_size"][1]:
                        return False
                        
            except Exception:
                return False
            
            # Verificar qualidade da imagem usando OpenCV
            try:
                image = cv2.imread(str(image_path))
                if image is None:
                    return False
                    
                # Calcular m√©trica de qualidade (vari√¢ncia do Laplaciano)
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                quality_score = cv2.Laplacian(gray, cv2.CV_64F).var()
                
                if quality_score < self.config["quality_threshold"]:
                    return False
                    
            except Exception:
                return False
            
            return True
            
        except Exception:
            return False

    def collect_google_images_refined(self, query: str, category: str, subcategory: str, max_images: int = 50):
        """
        Coleta imagens do Google - CORRIGIDO PARA BAIXAR IMAGENS REAIS
        """
        print(f"üîç Coletando: {query}")
        
        try:
            api_key = os.getenv("GOOGLE_API_KEY")
            search_engine_id = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
            
            if not api_key or not search_engine_id:
                print("‚ùå API keys n√£o configuradas!")
                return 0
            
            url = "https://www.googleapis.com/customsearch/v1"
            
            # PAR√ÇMETROS CORRETOS DA GOOGLE CUSTOM SEARCH API
            params = {
                "key": api_key,
                "cx": search_engine_id,
                "q": f"{query} brasil -site:pinterest.com -site:shutterstock.com -clipart -drawing",
                "searchType": "image",
                "num": min(max_images, 10),
                "imgType": "photo",        # photo, clipart, lineart, face, news, stock
                "imgSize": "large",        # icon, small, medium, large, xlarge, xxlarge, huge
                "safe": "active",
                "cr": "countryBR",         # Country restrict
                "gl": "br",                # Geolocation
                "hl": "pt-BR",             # Interface language
                "rights": "cc_publicdomain,cc_attribute,cc_sharealike,cc_noncommercial,cc_nonderived"
            }
            
            headers = {
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
            }
            
            print(f"üì° Fazendo request para API...")
            response = requests.get(url, params=params, headers=headers, timeout=30)
            
            print(f"üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                if "items" not in data:
                    print("‚ùå Nenhum resultado encontrado")
                    return 0
                
                print(f"‚úÖ Encontrou {len(data['items'])} resultados")
                
                valid_images = 0
                
                for i, item in enumerate(data["items"]):
                    try:
                        # USA O LINK DIRETO DA API
                        image_url = item.get("link")
                        image_title = item.get("title", "")
                        
                        print(f"   {i+1}. {image_title[:40]}...")
                        print(f"       URL: {image_url[:60]}...")
                        
                        # Baixar imagem direto
                        print(f"       üì• Baixando...")
                        img_response = requests.get(image_url, headers=headers, timeout=15)
                        
                        if img_response.status_code == 200:
                            # Salvar direto
                            filename = f"{subcategory}_{valid_images:03d}.jpg"
                            final_path = self._get_output_dir(category) / filename
                            
                            with open(final_path, 'wb') as f:
                                f.write(img_response.content)
                            
                            print(f"       ‚úÖ SALVA: {filename} ({len(img_response.content)} bytes)")
                            valid_images += 1
                            
                        else:
                            print(f"       ‚ùå Erro download: {img_response.status_code}")
                        
                        time.sleep(2)  # Rate limiting
                        
                    except Exception as e:
                        print(f"       ‚ö†Ô∏è Erro: {e}")
                        continue
                
                print(f"ÔøΩ Total coletado: {valid_images} imagens")
                return valid_images
                
            else:
                print(f"‚ùå Erro API: {response.status_code}")
                if response.status_code == 429:
                    print("   Muitas requests - aguarde")
                return 0
                
        except Exception as e:
            print(f"‚ùå Erro geral: {e}")
            return 0

    def collect_government_only(self, query: str, category: str, subcategory: str, max_images: int = 10):
        """Coleta APENAS de sites .gov.br - VERS√ÉO SIMPLES"""
        print(f"üèõÔ∏è Coletando de sites gov: {query}")
        
        # Adicionar site:gov.br na query
        gov_query = f"{query} site:gov.br"
        
        return self.collect_google_images_refined(gov_query, category, f"gov_{subcategory}", max_images)

    def debug_api_response(self, query: str, max_results: int = 3):
        """Debug simples da API"""
        print(f"üî¨ DEBUG: {query}")
        
        try:
            api_key = os.getenv("GOOGLE_API_KEY")
            search_engine_id = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
            
            params = {
                "key": api_key,
                "cx": search_engine_id,
                "q": query,
                "searchType": "image",
                "num": max_results
            }
            
            response = requests.get("https://www.googleapis.com/customsearch/v1", params=params)
            
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if "items" in data:
                    print(f"Resultados: {len(data['items'])}")
                    for i, item in enumerate(data["items"], 1):
                        print(f"  {i}. {item.get('title', '')[:50]}...")
                        print(f"     {item['link'][:70]}...")
                else:
                    print("Nenhum resultado")
            else:
                print(f"Erro: {response.status_code}")
                
        except Exception as e:
            print(f"Erro: {e}")

    def collect_all_signal_plates(self, max_per_category: int = 20):
        """Coleta todas as categorias de signal plates."""
        
        print("üö¶ COLETA COMPLETA DE SIGNAL PLATES")
        print("=" * 50)
        
        total_collected = 0
        
        for category, queries in self.signal_queries.items():
            print(f"\nüìç Coletando {category}...")
            category_total = 0
            
            for query in queries:
                collected = self.collect_google_images_refined(
                    query=query,
                    category="signal_plates",
                    subcategory=category,
                    max_images=max_per_category
                )
                category_total += collected
                time.sleep(self.config["delay_between_requests"])
            
            print(f"   ‚úÖ {category}: {category_total} imagens")
            total_collected += category_total
        
        print(f"\nüìä TOTAL COLETADO: {total_collected} imagens")
        return total_collected

    def collect_all_vehicle_plates(self, max_per_category: int = 20):
        """Coleta todas as categorias de vehicle plates."""
        
        print("üöó COLETA COMPLETA DE VEHICLE PLATES")
        print("=" * 50)
        
        total_collected = 0
        
        for category, queries in self.vehicle_queries.items():
            print(f"\nüìç Coletando {category}...")
            category_total = 0
            
            for query in queries:
                collected = self.collect_google_images_refined(
                    query=query,
                    category="vehicle_plates",
                    subcategory=category,
                    max_images=max_per_category
                )
                category_total += collected
                time.sleep(self.config["delay_between_requests"])
            
            print(f"   ‚úÖ {category}: {category_total} imagens")
            total_collected += category_total
        
        print(f"\nüìä TOTAL COLETADO: {total_collected} imagens")
        return total_collected

    def get_statistics(self):
        """Retorna estat√≠sticas da coleta."""
        
        signal_count = len(list(self.signal_dir.glob("*.jpg")))
        vehicle_count = len(list(self.vehicle_dir.glob("*.jpg")))
        rejected_count = len(list(self.rejected_dir.glob("*.jpg")))
        
        total = signal_count + vehicle_count + rejected_count
        
        return {
            "signal_plates": signal_count,
            "vehicle_plates": vehicle_count,
            "rejected": rejected_count,
            "total": total,
            "approval_rate": (signal_count + vehicle_count) / total * 100 if total > 0 else 0
        }