#!/usr/bin/env python3
"""
Script para criar modelos YOLO especializados para detec√ß√£o de placas
"""

import os
import sys
import shutil
from pathlib import Path
from ultralytics import YOLO
import yaml

def create_signal_plates_model():
    """Cria modelo YOLO para placas de sinaliza√ß√£o"""
    print("üö¶ Criando modelo para placas de sinaliza√ß√£o...")
    
    # Verificar se existe dataset
    dataset_path = "datasets/signal_plates/dataset.yaml"
    if not os.path.exists(dataset_path):
        print(f"‚ùå Dataset n√£o encontrado: {dataset_path}")
        return False
    
    try:
        # Carregar modelo base
        model = YOLO('yolov8n.pt')
        
        # Treinar modelo especializado
        print("üìö Treinando modelo para placas de sinaliza√ß√£o...")
        results = model.train(
            data=dataset_path,
            epochs=50,
            imgsz=640,
            batch=16,
            name='signal_plates_yolo',
            project='models',
            exist_ok=True,
            save=True,
            plots=True
        )
        
        # Salvar modelo final
        model_path = "models/signal_plates_yolo.pt"
        model.save(model_path)
        print(f"‚úÖ Modelo salvo em: {model_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar modelo de placas de sinaliza√ß√£o: {e}")
        return False

def create_vehicle_plates_model():
    """Cria modelo YOLO para placas de ve√≠culos"""
    print("üöó Criando modelo para placas de ve√≠culos...")
    
    # Verificar se existe dataset
    dataset_path = "datasets/vehicle_plates/dataset.yaml"
    if not os.path.exists(dataset_path):
        print(f"‚ùå Dataset n√£o encontrado: {dataset_path}")
        return False
    
    try:
        # Carregar modelo base
        model = YOLO('yolov8n.pt')
        
        # Treinar modelo especializado
        print("üìö Treinando modelo para placas de ve√≠culos...")
        results = model.train(
            data=dataset_path,
            epochs=50,
            imgsz=640,
            batch=16,
            name='vehicle_plates_yolo',
            project='models',
            exist_ok=True,
            save=True,
            plots=True
        )
        
        # Salvar modelo final
        model_path = "models/vehicle_plates_yolo.pt"
        model.save(model_path)
        print(f"‚úÖ Modelo salvo em: {model_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar modelo de placas de ve√≠culos: {e}")
        return False

def create_fallback_models():
    """Cria modelos de fallback usando YOLOv8n pr√©-treinado"""
    print("üîÑ Criando modelos de fallback...")
    
    try:
        # Modelo para placas de sinaliza√ß√£o (fallback)
        model = YOLO('yolov8n.pt')
        model.save('models/signal_plates_yolo.pt')
        print("‚úÖ Modelo de fallback para placas de sinaliza√ß√£o criado")
        
        # Modelo para placas de ve√≠culos (fallback)
        model.save('models/vehicle_plates_yolo.pt')
        print("‚úÖ Modelo de fallback para placas de ve√≠culos criado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar modelos de fallback: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando cria√ß√£o de modelos YOLO...")
    
    # Criar diret√≥rio models
    os.makedirs('models', exist_ok=True)
    
    # Tentar criar modelos especializados primeiro
    signal_success = create_signal_plates_model()
    vehicle_success = create_vehicle_plates_model()
    
    # Se n√£o conseguiu treinar, criar modelos de fallback
    if not signal_success or not vehicle_success:
        print("‚ö†Ô∏è  Usando modelos de fallback...")
        fallback_success = create_fallback_models()
        
        if fallback_success:
            print("‚úÖ Modelos de fallback criados com sucesso!")
        else:
            print("‚ùå Falha ao criar modelos de fallback")
            return False
    
    print("üéâ Modelos YOLO criados com sucesso!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
