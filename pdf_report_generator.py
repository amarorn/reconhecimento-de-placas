#!/usr/bin/env python3
"""
Gerador de Relat√≥rio PDF - Placas Brasileiras
=============================================

Este script gera um relat√≥rio completo em PDF com:
- Informa√ß√µes das placas detectadas
- Regi√µes (estados) identificados
- N√∫meros das placas
- Estat√≠sticas e gr√°ficos
"""

import os
from datetime import datetime
from plate_recognition_brasil import BrasilPlateRecognizer
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Usar backend n√£o-interativo para servidor

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.lib.enums import TA_CENTER, TA_LEFT
    from reportlab.pdfgen import canvas
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("‚ö†Ô∏è  ReportLab n√£o dispon√≠vel. Instalando...")
    import subprocess
    subprocess.run(['pip', 'install', 'reportlab'])
    
    # Tentar importar novamente ap√≥s instala√ß√£o
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_CENTER, TA_LEFT
        from reportlab.pdfgen import canvas
        REPORTLAB_AVAILABLE = True
    except ImportError:
        REPORTLAB_AVAILABLE = False

class PDFReportGenerator:
    """Gerador de relat√≥rios em PDF"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """Configura estilos customizados"""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        )
        
        self.subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_LEFT,
            textColor=colors.darkgreen
        )
        
        self.header_style = ParagraphStyle(
            'CustomHeader',
            parent=self.styles['Heading3'],
            fontSize=14,
            spaceAfter=15,
            alignment=TA_LEFT,
            textColor=colors.darkred
        )
    
    def create_summary_table(self, report_data: dict) -> Table:
        """Cria tabela de resumo"""
        summary_data = [
            ['M√©trica', 'Valor'],
            ['Total de Imagens', str(report_data['summary']['total_images'])],
            ['Processamentos Bem-sucedidos', str(report_data['summary']['successful_processings'])],
            ['Total de Placas Encontradas', str(report_data['summary']['total_plates_found'])],
            ['Erros', str(report_data['summary']['errors'])],
            ['Data/Hora', report_data['timestamp']]
        ]
        
        table = Table(summary_data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        return table
    
    def create_plates_table(self, plates_details: list) -> Table:
        """Cria tabela detalhada das placas"""
        if not plates_details:
            return Paragraph("Nenhuma placa encontrada", self.styles['Normal'])
        
        # Cabe√ßalho da tabela
        headers = ['Imagem', 'Placa', 'Regi√£o', 'Tipo', 'N√∫mero', 'Confian√ßa']
        table_data = [headers]
        
        # Dados das placas
        for plate in plates_details:
            row = [
                os.path.basename(plate['image']),
                plate['plate_text'],
                plate['region_name'] or 'N/A',
                plate['plate_type'] or 'N/A',
                plate['plate_number'] or 'N/A',
                f"{plate['confidence']:.2f}"
            ]
            table_data.append(row)
        
        # Criar tabela
        col_widths = [1.5*inch, 1*inch, 1.5*inch, 1.5*inch, 1*inch, 0.8*inch]
        table = Table(table_data, colWidths=col_widths)
        
        # Estilizar tabela
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkgreen),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE')
        ]))
        
        return table
    
    def create_regions_summary(self, regions_summary: dict) -> Table:
        """Cria tabela de resumo por regi√£o"""
        if not regions_summary:
            return Paragraph("Nenhuma regi√£o identificada", self.styles['Normal'])
        
        # Ordenar por quantidade
        sorted_regions = sorted(regions_summary.items(), key=lambda x: x[1], reverse=True)
        
        table_data = [['Regi√£o (Estado)', 'Quantidade de Placas']]
        for region, count in sorted_regions:
            table_data.append([region, str(count)])
        
        table = Table(table_data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        return table
    
    def create_plate_types_summary(self, plate_types_summary: dict) -> Table:
        """Cria tabela de resumo por tipo de placa"""
        if not plate_types_summary:
            return Paragraph("Nenhum tipo de placa identificado", self.styles['Normal'])
        
        table_data = [['Tipo de Placa', 'Quantidade']]
        for plate_type, count in plate_types_summary.items():
            table_data.append([plate_type, str(count)])
        
        table = Table(table_data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkorange),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightyellow),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        return table
    
    def generate_pdf_report(self, report_data: dict, output_filename: str = None) -> str:
        """Gera relat√≥rio completo em PDF"""
        if not output_filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_filename = f"relatorio_placas_brasileiras_{timestamp}.pdf"
        
        # Criar documento
        doc = SimpleDocTemplate(output_filename, pagesize=A4)
        story = []
        
        # T√≠tulo principal
        story.append(Paragraph(report_data['title'], self.title_style))
        story.append(Spacer(1, 20))
        
        # Informa√ß√µes gerais
        story.append(Paragraph(f"Data/Hora: {report_data['timestamp']}", self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Resumo executivo
        story.append(Paragraph("üìä RESUMO EXECUTIVO", self.subtitle_style))
        story.append(Spacer(1, 10))
        
        summary_table = self.create_summary_table(report_data)
        story.append(summary_table)
        story.append(Spacer(1, 30))
        
        # Detalhes das placas
        story.append(Paragraph("üöó DETALHES DAS PLACAS DETECTADAS", self.subtitle_style))
        story.append(Spacer(1, 10))
        
        plates_table = self.create_plates_table(report_data['plates_details'])
        story.append(plates_table)
        story.append(Spacer(1, 30))
        
        # Resumo por regi√£o
        story.append(Paragraph("üìç RESUMO POR REGI√ÉO (ESTADO)", self.subtitle_style))
        story.append(Spacer(1, 10))
        
        regions_table = self.create_regions_summary(report_data['regions_summary'])
        story.append(regions_table)
        story.append(Spacer(1, 30))
        
        # Resumo por tipo de placa
        story.append(Paragraph("üè∑Ô∏è RESUMO POR TIPO DE PLACA", self.subtitle_style))
        story.append(Spacer(1, 10))
        
        types_table = self.create_plate_types_summary(report_data['plate_types_summary'])
        story.append(types_table)
        story.append(Spacer(1, 30))
        
        # An√°lise t√©cnica
        story.append(Paragraph("üîß AN√ÅLISE T√âCNICA", self.subtitle_style))
        story.append(Spacer(1, 10))
        
        analysis_text = f"""
        Este relat√≥rio foi gerado automaticamente pelo sistema de reconhecimento de placas brasileiras.
        
        ‚Ä¢ Total de imagens processadas: {report_data['summary']['total_images']}
        ‚Ä¢ Taxa de sucesso: {(report_data['summary']['successful_processings']/report_data['summary']['total_images']*100):.1f}%
        ‚Ä¢ Placas detectadas com sucesso: {report_data['summary']['total_plates_found']}
        ‚Ä¢ Erros encontrados: {report_data['summary']['errors']}
        
        O sistema identifica automaticamente:
        - Padr√£o antigo (Mercosul): ABC1234
        - Padr√£o novo (Mercosul): ABC1D23
        - Regi√£o/Estado de origem
        - N√∫mero da placa
        - Tipo de padroniza√ß√£o
        """
        
        story.append(Paragraph(analysis_text, self.styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Rodap√©
        story.append(Paragraph("--- Relat√≥rio gerado automaticamente ---", self.styles['Normal']))
        story.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}", self.styles['Normal']))
        
        # Construir PDF
        doc.build(story)
        
        return output_filename

def main():
    """Fun√ß√£o principal para gerar relat√≥rio"""
    print("üìä GERADOR DE RELAT√ìRIO PDF - PLACAS BRASILEIRAS")
    print("=" * 60)
    
    if not REPORTLAB_AVAILABLE:
        print("‚ùå ReportLab n√£o est√° dispon√≠vel. Instalando...")
        try:
            import subprocess
            subprocess.run(['pip', 'install', 'reportlab'], check=True)
            print("‚úÖ ReportLab instalado com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao instalar ReportLab: {e}")
            return
    
    # Criar reconhecedor brasileiro
    recognizer = BrasilPlateRecognizer()
    
    print("\nüîç Processando imagens para gerar relat√≥rio...")
    
    # Processar todas as imagens
    results = recognizer.process_batch_brazil()
    
    # Gerar dados do relat√≥rio
    report_data = recognizer.generate_report_data(results)
    
    print(f"\nüìã DADOS COLETADOS:")
    print(f"   ‚Ä¢ Total de imagens: {report_data['summary']['total_images']}")
    print(f"   ‚Ä¢ Placas encontradas: {report_data['summary']['total_plates_found']}")
    print(f"   ‚Ä¢ Regi√µes identificadas: {len(report_data['regions_summary'])}")
    print(f"   ‚Ä¢ Tipos de placa: {len(report_data['plate_types_summary'])}")
    
    # Gerar PDF
    print(f"\nüìÑ Gerando relat√≥rio em PDF...")
    
    try:
        generator = PDFReportGenerator()
        pdf_filename = generator.generate_pdf_report(report_data)
        
        print(f"‚úÖ Relat√≥rio gerado com sucesso!")
        print(f"üìÅ Arquivo: {pdf_filename}")
        print(f"üìè Tamanho: {os.path.getsize(pdf_filename)} bytes")
        
        # Mostrar detalhes das placas
        if report_data['plates_details']:
            print(f"\nüöó PLACAS DETECTADAS:")
            for plate in report_data['plates_details']:
                print(f"   ‚Ä¢ {plate['plate_text']} - {plate['region_name']} ({plate['plate_type']})")
                print(f"     N√∫mero: {plate['plate_number']} | Confian√ßa: {plate['confidence']:.2f}")
        
        print(f"\nüéØ Relat√≥rio completo salvo em: {pdf_filename}")
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF: {e}")

if __name__ == "__main__":
    main()
